# vi: syntax=python:et:ts=4

import commands

Import(Split("env test_env have_client_prereqs have_X have_server_prereqs"))

#color_range.cpp should be removed, but game_config depends on it.
#game_config has very few things that are needed elsewhere, it should be
#removed.  Requires moving path and version at least to other files.

libwesnoth_core_sources = Split("""
    color_range.cpp
    config.cpp
    filesystem.cpp
    game_config.cpp
    gettext.cpp
    log.cpp
    map.cpp
    network.cpp
    network_worker.cpp
    thread.cpp
    tstring.cpp
    util.cpp
    serialization/binary_or_text.cpp
    serialization/binary_wml.cpp
    serialization/parser.cpp
    serialization/preprocessor.cpp
    serialization/string_utils.cpp
    serialization/tokenizer.cpp
    """)
libwesnoth_core = env.Library("wesnoth_core", libwesnoth_core_sources)

libwesnoth_sources = Split("""
    astarnode.cpp
    astarsearch.cpp
    builder.cpp
    cavegen.cpp
    clipboard.cpp
    construct_dialog.cpp
    cursor.cpp
    display.cpp
    events.cpp
    filechooser.cpp
    font.cpp
    generic_event.cpp
    hotkeys.cpp
    image.cpp
    key.cpp
    language.cpp
    loadscreen.cpp
    map_create.cpp
    map_label.cpp
    mapgen.cpp
    mapgen_dialog.cpp
    marked-up_text.cpp
    minimap.cpp
    pathutils.cpp
    preferences.cpp
    preferences_display.cpp
    race.cpp
    random.cpp
    reports.cpp
    show_dialog.cpp
    sound.cpp
    soundsource.cpp
    terrain.cpp
    terrain_translation.cpp
    tooltips.cpp
    video.cpp
    theme.cpp
    widgets/button.cpp
    widgets/file_menu.cpp
    widgets/label.cpp
    widgets/menu.cpp
    widgets/menu_style.cpp
    widgets/progressbar.cpp
    widgets/scrollarea.cpp
    widgets/scrollbar.cpp
    widgets/slider.cpp
    widgets/textbox.cpp
    widgets/widget.cpp
    wml_exception.cpp
    gui/dialogs/addon_connect.cpp
    gui/widgets/button.cpp
    gui/widgets/canvas.cpp
    gui/widgets/control.cpp
    gui/widgets/event_handler.cpp
    gui/widgets/grid.cpp
    gui/widgets/label.cpp
    gui/widgets/panel.cpp
    gui/widgets/settings.cpp
    gui/widgets/text_box.cpp
    gui/widgets/helper.cpp
    gui/widgets/tooltip.cpp
    gui/widgets/widget.cpp
    gui/widgets/window.cpp
    gui/widgets/window_builder.cpp
    """)
libwesnoth = env.Library("wesnoth", libwesnoth_sources)

libwesnothd_sources = Split("""
    loadscreen_empty.cpp
    tools/dummy_video.cpp
    """)
libwesnothd = env.Library("wesnothd", libwesnothd_sources)

libcampaignd_sources = Split("""
    publish_campaign.cpp
    """)
libcampaignd = env.Library("campaignd", libcampaignd_sources)

libwesnoth_sdl_sources = Split("""
    sdl_utils.cpp
    """)
libwesnoth_sdl = env.Library("wesnoth_sdl", libwesnoth_sdl_sources)

libcutter_sources = Split("""
    tools/exploder_utils.cpp
    tools/exploder_cutter.cpp
    """)
libcutter = env.Library("cutter", libcutter_sources)

# Used by both 'wesnoth' and 'test' targets
wesnoth_sources = Split("""
    about.cpp
    actions.cpp
    ai.cpp
    ai_dfool.cpp
    ai_attack.cpp
    ai_move.cpp
    ai_python.cpp
    ai_village.cpp
    animated_game.cpp
    attack_prediction.cpp
    callable_objects.cpp
    config_adapter.cpp
    dialogs.cpp
    floating_textbox.cpp
    formula.cpp
    formula_ai.cpp
    formula_function.cpp
    formula_tokenizer.cpp
    game_display.cpp
    game_events.cpp
    game_preferences.cpp
    game_preferences_display.cpp
    gamestatus.cpp
    generate_report.cpp
    halo.cpp
    help.cpp
    intro.cpp
    leader_list.cpp
    menu_events.cpp
    mouse_events.cpp
    multiplayer.cpp
    multiplayer_ui.cpp
    multiplayer_wait.cpp
    multiplayer_connect.cpp
    multiplayer_create.cpp
    multiplayer_lobby.cpp
    pathfind.cpp
    playcampaign.cpp
    play_controller.cpp
    playmp_controller.cpp
    playsingle_controller.cpp
    playturn.cpp
    replay.cpp
    replay_controller.cpp
    sha1.cpp
    settings.cpp
    statistics.cpp
    team.cpp
    terrain_filter.cpp
    titlescreen.cpp
    unit.cpp
    unit_abilities.cpp
    unit_animation.cpp
    unit_display.cpp
    unit_frame.cpp
    unit_map.cpp
    unit_types.cpp
    upload_log.cpp
    variable.cpp
    variant.cpp
    widgets/combo.cpp
    widgets/scrollpane.cpp
    """)

#
# Target declarations
#

if have_client_prereqs:
    wesnoth = env.Program("../wesnoth", ["game.cpp"] + wesnoth_sources + [libwesnoth_core, libwesnoth_sdl, libwesnoth, libcampaignd])
else:
    wesnoth = None
Export("wesnoth")

wesnoth_editor_sources = Split("""
    editor/editor.cpp
    editor/editor_layout.cpp
    editor/map_manip.cpp
    editor/editor_display.cpp
    editor/editor_palettes.cpp
    editor/editor_main.cpp
    editor/editor_dialogs.cpp
    editor/editor_undo.cpp
    animated_editor.cpp
    """)
if have_client_prereqs and have_X:
    wesnoth_editor = env.Program("../wesnoth_editor", wesnoth_editor_sources + [libwesnoth_core, libwesnoth_sdl, libwesnoth])
else:
    wesnoth_editor = None
Export("wesnoth_editor")

campaignd_sources = Split("""
    campaign_server/campaign_server.cpp
    """)
if have_server_prereqs:
    campaignd = env.Program("../campaignd", campaignd_sources + [libwesnoth_core, libwesnothd, libcampaignd, libwesnoth])
else:
    campaignd = None
Export("campaignd")

wesnothd_sources = Split("""
    server/game.cpp
    server/input_stream.cpp
    server/metrics.cpp
    server/player.cpp
    server/proxy.cpp
    server/server.cpp
    server/simple_wml.cpp
    """)
if have_server_prereqs:
    wesnothd = env.Program("../wesnothd", wesnothd_sources + [libwesnoth_core, libwesnothd])
else:
    wesnothd = None
Export("wesnothd")

cutter_sources = Split("""
    tools/cutter.cpp
    """)
if have_client_prereqs:
    cutter = env.Program("../cutter", cutter_sources + [libcutter, libwesnoth_core, libwesnoth_sdl, libwesnothd, libwesnoth],
        LIBS = env["LIBS"] + ["png"])
else:
    cutter = None
Export("cutter")

exploder_sources = Split("""
    tools/exploder.cpp
    tools/exploder_composer.cpp
    """)
if have_client_prereqs:
    exploder = env.Program("../exploder", exploder_sources + [libcutter, libwesnoth_core, libwesnoth_sdl, libwesnothd, libwesnoth],
        LIBS = env["LIBS"] + ["png"])
else:
    exploder = None
Export("exploder")

test_sources = Split("""
    tests/main.cpp
    tests/test_util.cpp
    """)
test_env.Program("test", test_sources + [libwesnoth_core, libwesnoth],
            CPPPATH = env["CPPPATH"] + ['/usr/include'],
            LIBS = env["LIBS"] + ['boost_unit_test_framework'])

# FIXME: Currently this will only work under Linux
env["svnrev"] = commands.getoutput("LC_ALL=C svnversion -n . 2>/dev/null")
revision_define = ""
if env["svnrev"] != "" and env["svnrev"] != "exported":
    revision_define = "#define REVISION \"%s\"\n" % env["svnrev"]
r = env.Command("revision.hpp", [],
                lambda target, source, env: open(str(target[0]), "w").write(revision_define))
env.AlwaysBuild(r)
env.TargetSignatures('content')

#
# File inventory, for archive makes abd analysis tools
#
headers = Split("""
    tools/exploder_composer.hpp
    tools/exploder_utils.hpp
    tools/exploder_cutter.hpp
    serialization/tokenizer.hpp
    serialization/parser.hpp
    serialization/binary_or_text.hpp
    serialization/binary_wml.hpp
    serialization/preprocessor.hpp
    serialization/string_utils.hpp
    widgets/progressbar.hpp
    widgets/textbox.hpp
    widgets/combo.hpp
    widgets/file_menu.hpp
    widgets/scrollpane.hpp
    widgets/menu.hpp
    widgets/button.hpp
    widgets/label.hpp
    widgets/slider.hpp
    widgets/scrollbar.hpp
    widgets/widget.hpp
    widgets/scrollarea.hpp
    server/player.hpp
    server/game.hpp
    server/input_stream.hpp
    server/proxy.hpp
    server/metrics.hpp
    editor/editor_undo.hpp
    editor/map_manip.hpp
    editor/editor_layout.hpp
    editor/editor.hpp
    editor/editor_palettes.hpp
    editor/editor_dialogs.hpp
    about.hpp
    actions.hpp
    ai.hpp
    ai2.hpp
    ai_dfool.hpp
    ai_interface.hpp
    ai_python.hpp
    animated.hpp
    animated.i
    array.hpp
    astarnode.hpp
    attack_prediction.hpp
    builder.hpp
    cavegen.hpp
    clipboard.hpp
    color_range.hpp
    config.hpp
    config_adapter.hpp
    construct_dialog.hpp
    cursor.hpp
    dialogs.hpp
    display.hpp
    events.hpp
    file_chooser.hpp
    filesystem.hpp
    floating_textbox.hpp
    font.hpp
    game_config.hpp
    game_display.hpp
    game_errors.hpp
    game_events.hpp
    game_preferences.hpp
    gamestatus.hpp
    generic_event.hpp
    gettext.hpp
    global.hpp
    halo.hpp
    help.hpp
    hotkeys.hpp
    image.hpp
    intro.hpp
    key.hpp
    language.hpp
    leader_list.hpp
    loadscreen.hpp
    log.hpp
    map.hpp
    map_create.hpp
    map_label.hpp
    mapgen.hpp
    mapgen_dialog.hpp
    marked-up_text.hpp
    menu_events.hpp
    minimap.hpp
    mouse_events.hpp
    multiplayer.hpp
    multiplayer_connect.hpp
    multiplayer_create.hpp
    multiplayer_lobby.hpp
    multiplayer_ui.hpp
    multiplayer_wait.hpp
    network.hpp
    network_worker.hpp
    pathfind.hpp
    pathutils.hpp
    play_controller.hpp
    playcampaign.hpp
    playmp_controller.hpp
    playsingle_controller.hpp
    playturn.hpp
    preferences.hpp
    preferences_display.hpp
    publish_campaign.hpp
    race.hpp
    random.hpp
    replay.hpp
    replay_controller.hpp
    reports.hpp
    scoped_resource.hpp
    sha1.hpp
    settings.hpp
    sdl_utils.hpp
    show_dialog.hpp
    sound.hpp
    soundsource.hpp
    statistics.hpp
    team.hpp
    terrain.hpp
    terrain_filter.hpp
    terrain_translation.hpp
    theme.hpp
    thread.hpp
    titlescreen.hpp
    tooltips.hpp
    tstring.hpp
    unit.hpp
    unit_abilities.hpp
    unit_animation.hpp
    unit_display.hpp
    unit_frame.hpp
    unit_map.hpp
    unit_types.hpp
    upload_log.hpp
    util.hpp
    variable.hpp
    video.hpp
    wml_separators.hpp
    wesconfig.h
    wml_exception.hpp
    """)

sources =   libwesnoth_sources + libwesnoth_core_sources + \
            libwesnothd_sources + libcampaignd_sources + \
            libwesnoth_sdl_sources + libcutter_sources + \
            wesnoth_editor_sources + campaignd_sources + wesnothd_sources + \
            cutter_sources + exploder_sources + test_sources

Export("sources")
