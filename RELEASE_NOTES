This file is here to allow devs to easily add stuff in the release
notes for the next release, it allows easy syncing with the release
team, since you don't have to be around when the release takes
place...

Just dump whatever you want to have mentioned in the release notes here. Please
take care that it is in a way that allows copy&paste to the release notes. That
is making sure that spelling/grammer/whatever is usable and that you are using
 complete sentences, not just single words.

The release team should empty this file after each release.


There is a new experimental function to gray out not available languages in the
language selection dialog. This feature is available when Wesnoth is started
with the --new-widgets parameter. Packagers of various platforms are encouraged
to test this feature and report bugs when found. 

Users of Wesnoth 1.5.0 are encouraged to upgrade since Wesnoth 1.5.0 won't be
compatible with recent changes to the addon server.

"Host Network Game" feature in multiplayer menu requires "wesnothd" server to 
be compiled. Wesnothd is looked for by default in the same directory wesnoth was 
launched from. This can be changed in userdata/preferences by setting 
wesnothd_name="/path/to/wesnothd". Windows version is 
wesnothd_name="C:\path\to\wesnothd.exe"

Now content authors can specify the type of their addons. See the documentation
updates at http://www.wesnoth.org/wiki/PblWML for details.

Multiplayer era authors can put their [binary_path] declarations inside the
MULTIPLAYER #ifdef block (or similar). This was a fix to an ancient, forgotten
bug that a developer noticed while playing a single-player campaign that
conflicted with a multiplayer era's binary_path.

The confusion caused by name and wiki entry regarding [attacks] special has been
sorted out. What was [attacks] up till now was now logicaly renamed [swarm] and
a completely new [attacks] has been created behaving alike to [damage] and 
[chance_to_hit]. If an attack uses [swarm] any [attacks] declared will be
ignored.

WML authors can now choose if they want [event] spawned inside an [event] to have
variables evaluated immediately (new behavior) or at execution time (1.4 one, default) by
using a delayed_variable_substitution= key. Defaults to yes.
