#textdomain wesnoth-lib
#
# Contains the macros for the default widgets.
# - Global GUI macros get the GUI prefix.
# - Local (pre file) GUI macros get the _GUI prefix and should be undefined at
#   the end of the file.
#
#
# For now only TINY and NORMAL gui will be defined, once this works SMALL gui
# will be added, need to see which parts need to change for that. Later there
# will also be definitions for larger screens, mainly for using the extra width
# better.


###############################################################################
###                                                                         ###
### Generic macros usable for all resolutions.                              ###
###                                                                         ###
###############################################################################

# Centers the text horizontally.
#
# If the text is too wide it returns the left side.
# Rounding happens to the left side.
#define GUI__TEXT_HORIZONTALLY_CENTRED
	"(if(text_width < width, (width - text_width ) / 2, 0))"
#enddef

# Centers the text vertically.
#
# If the text is too high it returns the top side.
# Rounding happens to the bottom side.
#define GUI__TEXT_VERTICALLY_CENTRED
	"(if(text_height < height, (height - text_height + 1) / 2, 0))"
#enddef

#define GUI__CENTERED_TEXT FONT_SIZE FONT_STYLE FONT_COLOR
	[text]
		x = {GUI__TEXT_HORIZONTALLY_CENTRED}
		y = {GUI__TEXT_VERTICALLY_CENTRED}
		w = "(text_width)"
		h = "(text_height)"
		font_size = {FONT_SIZE}
		font_style = {FONT_STYLE}
		color = {FONT_COLOR}
		text = "(text)"
	[/text]
#enddef

# This white color is used for most texts.
#define GUI__FONT_COLOR_ENABLED__DEFAULT
	"221, 221, 221, 255"
#enddef

# This gray color is used for most text when the widget is disabled.
#define GUI__FONT_COLOR_DISABLED__DEFAULT
	"128, 128, 128, 255"
#enddef

# This gold color is used for the
# - title labels
# - button captions
# - checkbox captions
# - menu captions
#define GUI__FONT_COLOR_ENABLED__TITLE
	"188, 176, 136, 255"
#enddef

# This now uses the default disabled color but should be tiny bit lighter.
#define GUI__FONT_COLOR_DISABLED__TITLE
	{GUI__FONT_COLOR_DISABLED__DEFAULT}
#enddef

# This color is used as background in the listbox.
#define GUI__BACKGROUND_COLOR_ENABLED
	"21, 19, 19, 255"
#enddef

#define GUI__BACKGROUND_COLOR_DISABLED
	"64, 64, 64, 255"
#enddef

# Draws the background for a selected cell in a listbox. For now there's one
# version for both tiny and normal gui.
#define GUI__LISTBOX_SELECTED_CELL

	# corners are 10x10
	[image]
		x = 0
		y = 0
		name = "misc/selection2-border-topleft.png"
	[/image]

	[image]
		x = "(width - 10)"
		y = 0
		name = "misc/selection2-border-topright.png"
	[/image]

	[image]
		x = 0
		y = "(height - 10)"
		name = "misc/selection2-border-botleft.png"
	[/image]

	[image]
		x = "(width - 10)"
		y = "(height - 10)"
		name = "misc/selection2-border-botright.png"
	[/image]

	# since the lines are already quite long scale them instead of stretching
	# the height of the lines is 3 pixels.
	[image]
		x = 10
		y = 0
		w = "(width - 20)"
		name = "misc/selection2-border-top.png"
	[/image]

	[image]
		x = 10
		y = "(height - 3)"
		w = "(width - 20)"
		name = "misc/selection2-border-bottom.png"
	[/image]

	[image]
		x = 0
		y = 10
		h= "(height - 20)"
		name = "misc/selection2-border-left.png"
	[/image]

	[image]
		x = "(width - 3)"
		y = 10
		h = "(height - 20)"
		name = "misc/selection2-border-right.png"
	[/image]

	#main background 320 x 67
	[image]
		x = 3
		y = 3
		w = "(width - 6)"
		h = "(height - 6)"
		name = "misc/selection2-background.png"
	[/image]

#enddef

# Forces a wiget to be of a certain size.
# Depending of the flags of the parent widget the item will grow
#
# WIDTH                           Minimum width for the widget.
# HEIGHT                          Minimum height for the widget.
# WIDGET                          The widget to add into the item.
#
# eg instead of
#	[label]
#       # Note Foo has trailing spaces to force extra width.
#		label = "
#               Foo        
#               "
#	[label]
# you can do:
#
# {GUI_FORCE_WIDGET_MINIMUM_SIZE 150 75 (
#	[label]
#		label = "Foo"
#	[label]
# )}
#
#define GUI_FORCE_WIDGET_MINIMUM_SIZE WIDTH HEIGHT WIDGET
[stacked_widget]
	definition = "default"

	[stack]

		[layer]

			[row]

				[column]

					[spacer]
						definition = "default"
						width = "{WIDTH}"
						height = "{HEIGHT}"
					[/spacer]

				[/column]

			[/row]

		[/layer]

		[layer]

			[row]
				grow_factor = 1
				[column]
					grow_factor = 1
					horizontal_grow = "true"
					vertical_grow = "true"
					{WIDGET}
				[/column]

			[/row]

		[/layer]

	[/stack]

[/stacked_widget]
#enddef

###############################################################################
###                                                                         ###
### Macros for the tiny gui.                                                ###
###                                                                         ###
###############################################################################

#define GUI_TINY__RESOLUTION
	window_width = 640
	window_height = 480
#enddef

#define GUI_TINY__FONT_SIZE__TINY
	8
#enddef

#define GUI_TINY__FONT_SIZE__SMALL
	9
#enddef

#define GUI_TINY__FONT_SIZE__DEFAULT
	10
#enddef

#define GUI_TINY__FONT_SIZE__LARGE
	11
#enddef

#define GUI_TINY__FONT_SIZE__TITLE
	11
#enddef

###############################################################################
###                                                                         ###
### Macros for the normal gui.                                              ###
###                                                                         ###
###############################################################################

#define GUI_NORMAL__RESOLUTION
	window_width = 0
	window_height = 0
#enddef

#define GUI_NORMAL__FONT_SIZE__TINY
	10
#enddef

#define GUI_NORMAL__FONT_SIZE__SMALL
	12
#enddef

#define GUI_NORMAL__FONT_SIZE__DEFAULT
	14
#enddef

#define GUI_NORMAL__FONT_SIZE__LARGE
	18
#enddef

#define GUI_NORMAL__FONT_SIZE__TITLE
	18
#enddef

#TODO change comments a little
###
### The in game portrait dialogs.
### Due to the excessive amount of dialogs it's not possible to split off the
### window definitions. So this unit is a bit larger as wanted.
###

# These might become global have to evaluate later.
#define _GUI_HEIGHT_OFFSET
    25#enddef

# helper convert the scale factor, since we use it in two places define it as
# helper value. (Two the not working and working version, but want to avoid
# surprises when the not working version is fixed).
#define __GUI_SIZE_FACTOR
    3#enddef

### The formula language doesn't support variables so macros are used to
### emulate them. This makes the code what harder to read, so the algorithm for
### __GUI_IMAGE_WIDTH is described here:
###
### if gamemap_width <= TEXT_WIDTH_SATURATION
###     __GUI_IMAGE_WIDTH = gamemap_width / 3
### else
###     # Text reached it maximum width, take all space.
###     __GUI_IMAGE_WIDTH = gamemap_width - MAX_TEXT_WIDTH
### fi
### 
### if __GUI_IMAGE_WIDTH < 250
###     __GUI_IMAGE_WIDTH = 250
### fi
###
### if __GUI_IMAGE_WIDTH > 500
###     __GUI_IMAGE_WIDTH = 500
### fi

#define __GUI_MAX_HEIGHT
    (gamemap_height - 4)
#enddef

# The maximum width of the text
#define MAX_TEXT_WIDTH
    675
#enddef

# gamemap_width width needed to reach the MAX_TEXT_WIDTH
#define TEXT_WIDTH_SATURATION
    ((3 * {_GUI_HEIGHT_OFFSET}) / 2) 
#enddef

#define BEST_WIDTH
    (if(gamemap_width > {TEXT_WIDTH_SATURATION}, gamemap_width - {MAX_TEXT_WIDTH}, (gamemap_width / {__GUI_SIZE_FACTOR})))
#enddef

#define __GUI_BEST_SIZE
    (if({BEST_WIDTH} > {__GUI_MAX_HEIGHT}, {__GUI_MAX_HEIGHT}, {BEST_WIDTH}))
#enddef

#define ___GUI_IMAGE_WIDTH
    if({__GUI_BEST_SIZE} < 250, 250,
    if({__GUI_BEST_SIZE} > 500, 500, {__GUI_BEST_SIZE})
    )
#enddef

# This is the version with debug info
#define __GUI_IMAGE_WIDTH
    ([[
    debug_print('screen_width ', screen_width),
    debug_print('screen_height ', screen_height),
    debug_print('gamemap_width ', gamemap_width),
    debug_print('gamemap_height ', gamemap_height),
    debug_print('__GUI_MAX_HEIGHT ', {__GUI_MAX_HEIGHT}),
    debug_print('BEST_WIDTH ', {BEST_WIDTH}),
    debug_print('__GUI_BEST_SIZE ', {__GUI_BEST_SIZE})
    ],
    {___GUI_IMAGE_WIDTH}
    ][1]
    )
#enddef

#undef __GUI_IMAGE_WIDTH
# This is the version without debug info
#define __GUI_IMAGE_WIDTH
    ({___GUI_IMAGE_WIDTH})#enddef


# This is the macro for the image width which is can be used as string
# parameter.
#define _GUI_IMAGE_WIDTH
    "{__GUI_IMAGE_WIDTH}"#enddef

# the value the image needs to be scaled by, this version can be used as string
# parameter.
#define _GUI_IMAGE_SCALE_FACTOR
    (
    {__GUI_IMAGE_WIDTH} / 500
    )#enddef


# The formula to set the widthe of the real image width depending on the
# image real size
#define __GUI_IMAGE_DISPLAYED_WIDTH
    (
    if((image_original_width < 300) and (image_original_height < 300),
    image_original_width,
    ((image_original_width * {__GUI_IMAGE_WIDTH}) / 500))
    )#enddef

# The formula to set the heighte of the real image height depending on the
# image real size
#define __GUI_IMAGE_DISPLAYED_HEIGHT
    (
    if((image_original_width < 300) and (image_original_height < 300),
    image_original_height,
    ((image_original_height * {__GUI_IMAGE_WIDTH}) / 500))
    )#enddef

# The X location of the image to display, only tested on the left side.
#define __GUI_IMAGE_DISPLAYED_X X
    (
    if(image_original_width > 100,
    {X},
    ({__GUI_IMAGE_WIDTH} - image_width) / 2)

    )#enddef

# The Y location of the image to display, only tested on the left side.
# Note since we don't know the exact height of the text we can't centre
# the image. Instead we use the centre of the reserved image space.
#
# TODO the Y can't be determined properly since we don't know the height
# of the panel. Disabled the centring for now.
#
#define __GUI_IMAGE_DISPLAYED_Y
    (
    if(image_original_height > 0,
    (height - image_height),
    height - (({__GUI_IMAGE_WIDTH} - image_height) / 2))

    )#enddef
