#textdomain wesnoth-utbs

# This module handles events attached to four villages outside oasis not near necromancer fort. Scenario assumes that
# there is a chance to find an unit in each of them unless they have been captured by undead already.

#! -- Internal variables :
# $i, $outer_villages[]{4 sets of coordinates}
#! -- Depends on :
# $elf_pool[], $elf_pool_counter
#! -- Clears :
# $elf_pool[], $elf_pool_counter

# For each village we need to prepare a pair of events, one in case it's initialy captured by player and one in case
# it's ransacked by bad guys. Because it needs to be done before play starts, we're going to use 'start' event.

[event]
    name=start

    # There is a number of houses inside the oasis and even more tents by the necromancers fort, we need to make sure
    # that these are ignored. To do this we store coordinates ([store_locations]) of all desert villages (Dd^Vt) that
    # are not ([not]) within rectangle defined by points 40,1 60,12 (x=40-60, y=1-12) or ([or]) rectangle defined by 22,24 43,34 .
    # First rectangle includes all villages near necromancer, the second covers whole oasis. These coordinates are stored to
    # array called outer_villages (variable=outer_villages).

    [store_locations]
        variable=outer_villages
        terrain=Dd^Vdt,Dd^Vda
        [not]
            x=40-60
            y=1-12
            [or]
                x=22-43
                y=24-34
            [/or]
        [/not]
    [/store_locations]
    # Now for each stored set of coordinates we need to prepare a capture event that can be triggered both by good and bad guys.
    # To do this we declare an iterator.
    {VARIABLE i 0}

    # And use foreach macro, that simulates an loop walking over an array from beginning to end.
    {FOREACH outer_villages i}
        # In this way for each village we declare an capture event
        [event]
            name=capture
            delayed_variable_substitution=no
            # That triggers for both side 1 and 3 on a village of coordinates x,y
            [filter]
                side=1,3
                x=$outer_villages[$i].x
                y=$outer_villages[$i].y
            [/filter]

            # Now depending on which side captured the village there will be different outcomes.
            [if]
                # When unit capturing village belongs to a player
                [variable]
                    name=unit.side
                    equals=1
                [/variable]
                [then]
                    # We generate a random number between 1 and 100
                    {VARIABLE_OP fate random 1..100}
                    # And check if it's lower than a treshold of finding an unit that's dependent on diffficulty level
                    # 60% on easy, 50% on normal, 40% on hard. We use preprocesor to choose apropriate chance
                    [if]
                        [variable]
                            name=fate
#ifdef EASY
                            less_than_equal_to=60
#endif
#ifdef NORMAL
                            less_than_equal_to=50
#endif
#ifdef HARD
                            less_than_equal_to=40
#endif
                        [/variable]
                        [then]
                            # So the RNG smiled upon the player, time to pick an random elf from pool we prepared in scenario_start
                            # but we have keep drawing until we hit a nonblank record, since some of them will be cleared already
                            # so we prepare a loop that's going to run until our check on random variable evaluates to ture.
                            # For this we need to set random to a value that will evaluate as false to guarantee at least one loop pass.
                            {VARIABLE fate $|elf_pool_counter}

                            [while]
                                [variable]
                                    name=fate
                                    equals=$elf_pool_counter
                                [/variable]
                                [do]
                                    # Now we can draw an elf. It's important to remember that even though we have $elf_pool_counter
                                    # units, they are indexed from 0 so we need to substract 1 from drawn number
                                    {VARIABLE_OP fate random 1..$|elf_pool_counter}
                                    {VARIABLE_OP fate add -1}
                                    # Create an unit with data drawn and place it on an empty hex by the village, since he village itself is occupied
                                    [if]
                                        [variable]
                                            name=flagset[$fate].flag
                                            equals=set
                                        [/variable]
                                        [then]
                                            {VARIABLE fate $|elf_pool_counter}
                                        [/then]
                                        [else]
                                            {VARIABLE flagset[$|fate].flag set}
                                            {LOYAL_UNIT 1 $|elf_pool[$|fate].type $|x1 $|y1 $|elf_pool[$|fate].id $|elf_pool[$|fate].name}
                                        [/else]
                                    [/if]
                                [/do]
                            [/while]

                            # When done remove uniit from the pool
                            {CLEAR_VARIABLE elf_pool[$|fate]}

                            # And write joyful message
                            [message]
                                speaker=unit
                                message= _ "Oh good, some elves have survived in this outer settlement. They've agreed to help us search for other survivors."
                            [/message]
                        [/then]
                        # And when RNG plays hard ball we need to inform the player he's out of luck
                        [else]
                            [message]
                                speaker=unit
                                message= _ "The encampment is empty. I wonder what happened to the inhabitants?"
                            [/message]
                        [/else]
                    [/if]
                [/then]

                # When the unit belongs to the bad guy... Tough luck, there is actualy no bonus from that now, so we just set up another event
                # this time for player only for the time he recaptures the village.
                [else]
                    [event]
                        name=capture
                        [filter]
                            side=1
                            x=$x1
                            y=$y1
                        [/filter]
                        [message]
                            speaker=unit
                            message= _ "This encampment has been abandoned. There are signs of a struggle and a few bloodstains but nothing else. I fear for those elves who lived out here."
                        [/message]
                    [/event]
                [/else]
            [/if]
        [/event]
    {NEXT i}

    {CLEAR_VARIABLE i}
    {CLEAR_VARIABLE outer_villages}
[/event]

# This event unstores all unspawned units from the pool into the recall list. Reason for this is pretty simple, it's much easier to finish
# sc3 for example having two free hunters than two free scouts.

[event]
    name=victory

    {VARIABLE i 0}
    {FOREACH elf_pool i}
        [if]
            [variable]
                name=elf_pool[$i].type
                not_equals=$empty
            [/variable]
            [then]
                [unit]
                    side=1
                    type=$elf_pool[$random].type
                    id=$elf_pool[$random].id
                    name=$elf_pool[$random].name
                    gender=$elf_pool[$random].gender
                    x=$x1
                    y=$y1
                    animate=yes
#ifdef EASY
                    [modifications]
                        {TRAIT_LOYAL}
                    [/modifications]
#endif
                [/unit]
            [/then]
        [/if]
    {NEXT i}
    {CLEAR_VARIABLE elf_pool}
    {CLEAR_VARIABLE elf_pool_counter}
[/event]
