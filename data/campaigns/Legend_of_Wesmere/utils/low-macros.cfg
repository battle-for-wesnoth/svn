#textdomain wesnoth-low

#define FILTER_LOYALS
    [filter_wml]
        upkeep="loyal"
    [/filter_wml]
#enddef

#define RECALL_LOYALS
    [store_unit]
        variable=loyals
        [filter]
            {FILTER_LOYALS}
            [not]
                canrecruit=yes
            [/not]
            x,y=recall,recall
        [/filter]
    [/store_unit]

    {FOREACH loyals loyal_one}
        [recall]
            id=$loyals[$loyal_one].id
        [/recall]
    {NEXT loyal_one}
    {CLEAR_VARIABLE loyals}
#enddef

#define LOOT AMOUNT SIDE
    {VARIABLE amount_gold {AMOUNT}}
    [message]
        speaker=narrator
        message= _ "You retrieve $amount_gold pieces of gold."
        image=wesnoth-icon.png
    [/message]
    {CLEAR_VARIABLE amount_gold}

    [sound]
        name=gold.ogg
    [/sound]

    [gold]
        side={SIDE}
        amount={AMOUNT}
    [/gold]
#enddef

#define SET_GOLD SIDE EASY_FACTOR NORMAL_FACTOR HARD_FACTOR
    [event]
        name=prestart

        [store_gold]
            side=1
        [/store_gold]

#ifdef EASY
        {VARIABLE_OP gold multiply {EASY_FACTOR}}
#endif

#ifdef NORMAL
        {VARIABLE_OP gold multiply {NORMAL_FACTOR}}
#endif

#ifdef HARD
        {VARIABLE_OP gold multiply {HARD_FACTOR}}
#endif

        [modify_side]
            side={SIDE}
            gold=$gold
        [/modify_side]

        [wml_message]
            message="gold of side {SIDE} set to $gold"	# wmllint: ignore no spellcheck
            logger=warn
        [/wml_message]

        {CLEAR_VARIABLE gold}
    [/event]
#enddef

#define ELVES
Elvish Fighter, Elvish Archer, Elvish Scout, Elvish Shaman#enddef

#define SHAMANS
Elvish Shaman, Elvish Shyde, Elvish Enchantress, Elvish Sorceress, Elvish Sylph, Elvish Druid#enddef

#define DWARVES
Dwarvish Fighter, Dwarvish Thunderer, Dwarvish Scout, Dwarvish Ulfserker, Dwarvish Berserker, Dwarvish Guardsman#enddef

#define DWARVES_NO_ULFS
Dwarvish Fighter, Dwarvish Thunderer, Dwarvish Scout, Dwarvish Guardsman#enddef

#define ORCS1
Orcish Archer, Orcish Assassin, Orcish Grunt, Wolf Rider, Goblin Spearman#enddef

#define VILLAGE_SIDE SIDE X Y
    [event]
        name=prestart

        [command]
            [capture_village]
                side={SIDE}
                x={X}
                y={Y}
            [/capture_village]
        [/command]

        [message_debug]
            logger=warn
            message="village at {X}, {Y} to side {SIDE}"	# wmllint: ignore no spellcheck
        [/message_debug]
    [/event]
#enddef

#define STARTING_VILLAGES_ORC SIDE
    [event]
        name=prestart

        #{CAPTURE_VILLAGES_OF_TYPE (*^Vhh) {SIDE} 1 1 {INFINITY}}
        {CAPTURE_FILTERED_VILLAGES {SIDE} (terrain=*^Vo*)}
    [/event]
#enddef

#define STARTING_VILLAGES_ELF SIDE
    [event]
        name=prestart

        {CAPTURE_FILTERED_VILLAGES {SIDE} (terrain=*^Ve*)}
    [/event]
#enddef

#define STARTING_VILLAGES_DWARF SIDE
    [event]
        name=prestart

        #{CAPTURE_VILLAGES_OF_TYPE (*^Vhh) {SIDE} 1 1 {INFINITY}}
        {CAPTURE_FILTERED_VILLAGES {SIDE} (terrain=*^Vhh*)}
    [/event]
#enddef

#define STARTING_VILLAGES_HUMAN SIDE
    [event]
        name=prestart

        {CAPTURE_FILTERED_VILLAGES {SIDE} (terrain=*^Vh,*^Vha,*^Vhc,*^Vl*)}
    [/event]
#enddef

#define STARTING_VILLAGES_TROLL SIDE
    [event]
        name=prestart

        {CAPTURE_FILTERED_VILLAGES {SIDE} (terrain=*^Vc*)}
    [/event]
#enddef

#define VILLAGE_KALENZ X Y
    {VILLAGE_SIDE 1 {X} {Y}}
#enddef

# Thanks to Shadow Master for this macro
# !***Macro to random place unit within area***
#define RANDOM_PLACEMENT _X _Y _RADIUS _WML
    [store_locations]
        x,y={_X},{_Y}
        radius={_RADIUS}
        variable=random_placement_locations
    [/store_locations]

    {VARIABLE_OP random_string value "0..$random_placement_locations.length"}

    {RANDOM $random_string}

    {VARIABLE_OP random_placement_x value "$random_placement_locations[$random].x"}
    {VARIABLE_OP random_placement_y value "$random_placement_locations[$random].y"}

    {CLEAR_VARIABLE random_placement_locations}

    {_WML}

    [+unit]
        x,y=$random_placement_x,$random_placement_y
    [/unit]

    {CLEAR_VARIABLE random_placement_x}
    {CLEAR_VARIABLE random_placement_y}
#enddef

#define LOW_ENSURE_CANRECRUIT
    {MODIFY_UNIT id=Olurf canrecruit yes}
    {MODIFY_UNIT id=Landar canrecruit yes}
    {MODIFY_UNIT id=Kalenz canrecruit yes}
    {MODIFY_UNIT id=Cleodil canrecruit yes}
#enddef

#define LOW_ENSURE_NOT_HERO
    {UNMAKE_HERO Olurf}
    {UNMAKE_HERO Landar}
    {UNMAKE_HERO Kalenz}
    {UNMAKE_HERO Cleodil}
#enddef

#define LOW_PRESTART
    #this is needed to allow old saves (where the leaders can't recruit) to pick canrecrut="yes"
    [event]
        name=prestart
        {LOW_ENSURE_CANRECRUIT}
        {LOW_ENSURE_NOT_HERO}
    [/event]
#enddef

#define STORE_SIDE SIDE 
    [store_unit]
        [filter]
            side={SIDE}
        [/filter]
        variable=party_store
    [/store_unit]
#enddef

#define LOW_STEAL_UNIT_TO ID SIDE

    #if we have {ID} not in side {SIDE} transfer him to side {SIDE}
    # at position determined by existing unit of {SIDE} with id={ID}

    [store_unit]
        variable=source_var
        kill=yes
        [filter]
            id={ID}
            [not]
                side={SIDE}
            [/not]
        [/filter]
    [/store_unit]
    [store_unit]
        variable=target_var
        kill=no
        [filter]
            id={ID}
            side={SIDE}
        [/filter]
    [/store_unit]
    [if]
        [variable]
            name=source_var.length
            greater_than=0
        [/variable]
        [variable]
            name=target_var.length
            greater_than=0
        [/variable]
        [then]
            {VARIABLE source_var[0].side {SIDE}}
            [unstore_unit]
                variable=source_var[0]
                x=$target_var[0].x
                y=$target_var[0].y
            [/unstore_unit]
        [/then]
    [/if]
    {CLEAR_VARIABLE source_var}
    {CLEAR_VARIABLE target_var}
#enddef

#define PLAYER_SETUP
    {FLAG_VARIANT long}
#enddef

#define SAURIAN_SETUP
    {FLAG_VARIANT undead}
#enddef

#define ORC_SETUP
    {FLAG_VARIANT ragged}
#enddef

#define DWARF_SETUP
    {FLAG_VARIANT knalgan}
#enddef

#define LOYALIST_SETUP
    {FLAG_VARIANT loyalist}
#enddef

#define TROLL_SETUP
    {FLAG_VARIANT undead}
#enddef











#define GET_PERSISTENT_RECALLS_FROM3 SIDE1 SIDE2 SIDE3 GLOBAL_VAR LOCAL_VAR
    #Loads the recall list variable from both sides.
    {VARIABLE_FROM_GLOBAL LoW {GLOBAL_VAR} {LOCAL_VAR} {SIDE1}}
    [if]
        {VARIABLE_CONDITIONAL ({LOCAL_VAR}.length) equals 0}
        [then]
            {DEBUG ("Global Variable {GLOBAL_VAR} is empty for side {SIDE1}.")}
            {VARIABLE_FROM_GLOBAL LoW {GLOBAL_VAR} {LOCAL_VAR} {SIDE2}}
            [if]
                {VARIABLE_CONDITIONAL ({LOCAL_VAR}.length) equals 0}
                [then]
                    {DEBUG ("Global Variable {GLOBAL_VAR} is empty for side {SIDE2}.")}
                    {VARIABLE_FROM_GLOBAL LoW {GLOBAL_VAR} {LOCAL_VAR} {SIDE3}}
                    [if]
                        {VARIABLE_CONDITIONAL ({LOCAL_VAR}.length) equals 0}
                        [then]
                            {DEBUG ("Global Variable {GLOBAL_VAR} is empty for side {SIDE3}.")}
                        [/then]
                        [else]
                            {DEBUG ("Global Variable {GLOBAL_VAR} is at size: ${LOCAL_VAR}.length for side {SIDE3}.")}
                        [/else]
                    [/if]
                [/then]
                [else]
                    {DEBUG ("Global Variable {GLOBAL_VAR} is at size: ${LOCAL_VAR}.length for side {SIDE2}.")}
                [/else]
            [/if]
        [/then]
        [else]
            {DEBUG ("Global Variable {GLOBAL_VAR} is at size: ${LOCAL_VAR}.length for side {SIDE1}.")}
        [/else]
    [/if]
#enddef

# define GET_PERSISTENT_RECALLS_FROM3 SIDE1 SIDE2 SIDE3 GLOBAL_VAR LOCAL_VAR
#     Loads the recall list variable from all three sides.
#     {GET_PERSISTENT_RECALLS_FROM2 {SIDE1} {SIDE2} {GLOBAL_VAR} {LOCAL_VAR} }
#     [if]
#         {VARIABLE_CONDITIONAL ({LOCAL_VAR}.length) equals 0}
#         [then]
#             {DEBUG ("Global Variable {GLOBAL_VAR} is empty for side {SIDE2}.")}
#             {VARIABLE_FROM_GLOBAL LoW {GLOBAL_VAR} {LOCAL_VAR} {SIDE3}}
#         [/then]
#         [else]
#             {DEBUG ("Global Variable {GLOBAL_VAR} is at size: ${GLOBAL_VAR}.length for side {SIDE2}.")}
#         [/else]
#     [/if]
# enddef
