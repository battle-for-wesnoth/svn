#textdomain wesnoth
# These are clutter, scheduled to be removed.

# ! in comments is used for generating HTML documentation, ignore it otherwise.

#wmllint: markcheck off
#define DEPRECATE MACRO_NAME VERSION_NAME
    # Tag macros for removal, the VERSION_NAME argument is the
    # release where the message is shown the first time.
    # The removal will be 2 versions later.
    [deprecated_message]
        message="Macro '" + {MACRO_NAME} + "' is scheduled for removal in Wesnoth " + {VERSION_NAME} + "."
    [/deprecated_message]
#enddef
#wmllint: markcheck on

#define SET_LABEL_PERSISTENT X Y STRING
    {DEPRECATE SET_LABEL_PERSISTENT 1.9.3}
    [label]
        x={X}
        y={Y}
        text={STRING}
    [/label]
#enddef

#define SET_IMAGE_AND_LABEL_PERSISTENT X Y IMAGE STRING
    {DEPRECATE SET_IMAGE_AND_LABEL_PERSISTENT 1.9.3}
    [label]
        x={X}
        y={Y}
        text={STRING}
    [/label]

    [item]
        x={X}
        y={Y}
        image={IMAGE}
    [/item]
#enddef

#define TIME_ACTIONS CONTENT_WML
    # Messing with the variable is annoying, so I'll deprecate this in favour of
    # TIMED_ACTIONS
    {DEPRECATE TIME_ACTIONS 1.9.4}

    # Measure (in milliseconds) the time arbitrary event WML takes to
    # execute.  Afterwards, the time the enclosed WML took to execute
    # is found in the variable $timed_actions_ms.
    #
    # Example:
    #! [event]
    #!     name=start
    #!
    #!     {TIME_ACTIONS (
    #!         {MODIFY_UNIT race=orc name ( _ "Azir")}
    #!     )}
    #!
    #!     {DEBUG_MSG "Renaming all orcs to Azir took $timed_actions_ms|ms."}
    #! [/event]
    [set_variable]
        name=TIME_ACTIONS_time_begin
        time=stamp
    [/set_variable]

    {CONTENT_WML}

    [set_variable]
        name=TIME_ACTIONS_time_end
        time=stamp
    [/set_variable]

    [set_variable]
        name=timed_actions_ms
        value=$TIME_ACTIONS_time_end
    [/set_variable]
    [set_variable]
        name=timed_actions_ms
        sub=$TIME_ACTIONS_time_begin
    [/set_variable]

    [clear_variable]
        name=TIME_ACTIONS_time_begin
    [/clear_variable]
    [clear_variable]
        name=TIME_ACTIONS_time_end
    [/clear_variable]
#enddef

#define FLOATING_TEXT FILTER COLOR_VALUE TEXT
    {DEPRECATE FLOATING_TEXT 1.9.4}

    # Floats the given text above the given unit in the same manner as
    # damage numbers are displayed in combat.  For example when a unit
    # steps on a hidden trap and is dealt 8 damage, let's show this to
    # the player like all other damage is:
    #! {FLOATING_TEXT x,y=$x1,$y1 255,0,0 "8"}
    [store_unit]
        [filter]
            {FILTER}
        [/filter]

        kill=no
        variable=FLOATING_TEXT_temp
    [/store_unit]

    [unstore_unit]
        variable=FLOATING_TEXT_temp
        find_vacant=no
        red,green,blue={COLOR_VALUE}
        text={TEXT}
    [/unstore_unit]

    [clear_variable]
        name=FLOATING_TEXT_temp
    [/clear_variable]
#enddef

#define CAPTURE_FILTERED_VILLAGES SIDE FILTER
    {DEPRECATE CAPTURE_FILTERED_VILLAGES 1.9.4}

    # Change ownership of villages matching the specified location filter.
    [capture_village]
        side={SIDE}
        {FILTER}
    [/capture_village]
#enddef

#define SET_OBJECTIVES SIDE SUMMARY_TEXT NOTE_TEXT CONDITION_WML
    {DEPRECATE SET_OBJECTIVES 1.9.4}

    # Sets the objectives for a given player
    # Side 0 means every player. Does not affect gameplay,
    # except that it tells the player what the objectives of a scenario are.
    #
    # For example, we could set the objective for all players to: "survive for
    # 3 turns" with this:
    #! {SET_OBJECTIVES 0 "Survive for 3 turns" () ()}
    #
    [objectives]
        side = {SIDE}
        summary = {SUMMARY_TEXT}
        note = {NOTE_TEXT}
        {CONDITION_WML}
    [/objectives]
#enddef

#define VICTORY_CONDITION DESCRIPTION
    {DEPRECATE VICTORY_CONDITION 1.9.4}

    # Used in conjunction with SET_OBJECTIVES this sets a victory condition
    # (marked green).
    #
    # For example we could tell player 2 to win by killing all other players
    #! {SET_OBJECTIVES 0 "Kill eachother." (
    #!    {VICTORY_CONDITION "Kill all other players."}
    #! )}
    #
    [objective]
        condition = "win"
        description = {DESCRIPTION}
    [/objective]
#enddef

#define DEFEAT_CONDITION DESCRIPTION
    {DEPRECATE DEFEAT_CONDITION 1.9.4}

    # Used in conjunction with SET_OBJECTIVES this sets a defeat condition
    # (marked red).
    #
    # For example we could tell all players that they lose if they die.
    #! {SET_OBJECTIVES 0 "Survive." (
    #!    {DEFEAT_CONDITION "Death of your leader."}
    #! )}
    #
    [objective]
        condition = "lose"
        description = {DESCRIPTION}
    [/objective]
#enddef
