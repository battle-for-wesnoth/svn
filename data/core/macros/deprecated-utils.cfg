#textdomain wesnoth
# These are clutter, scheduled to be removed.

# ! in comments is used for generating HTML documentation, ignore it otherwise.

#wmllint: markcheck off
#define DEPRECATE MACRO_NAME VERSION_NAME
    # Tag macros for removal, the VERSION_NAME argument is the
    # release where the message is shown the first time.
    # The removal will be 2 versions later.
    [deprecated_message]
        message="Macro '" + {MACRO_NAME} + "' is scheduled for removal in Wesnoth " + {VERSION_NAME} + "."
    [/deprecated_message]
#enddef
#wmllint: markcheck on

#define SET_LABEL_PERSISTENT X Y STRING
    {DEPRECATE SET_LABEL_PERSISTENT 1.9.3}
    [label]
        x={X}
        y={Y}
        text={STRING}
    [/label]
#enddef

#define SET_IMAGE_AND_LABEL_PERSISTENT X Y IMAGE STRING
    {DEPRECATE SET_IMAGE_AND_LABEL_PERSISTENT 1.9.3}
    [label]
        x={X}
        y={Y}
        text={STRING}
    [/label]

    [item]
        x={X}
        y={Y}
        image={IMAGE}
    [/item]
#enddef

#define TIME_ACTIONS CONTENT_WML
    # Messing with the variable is annoying, so I'll deprecate this in favour of
    # TIMED_ACTIONS
    {DEPRECATE TIME_ACTIONS 1.9.4}

    # Measure (in milliseconds) the time arbitrary event WML takes to
    # execute.  Afterwards, the time the enclosed WML took to execute
    # is found in the variable $timed_actions_ms.
    #
    # Example:
    #! [event]
    #!     name=start
    #!
    #!     {TIME_ACTIONS (
    #!         {MODIFY_UNIT race=orc name ( _ "Azir")}
    #!     )}
    #!
    #!     {DEBUG_MSG "Renaming all orcs to Azir took $timed_actions_ms|ms."}
    #! [/event]
    {VARIABLE_OP TIME_ACTIONS_time_begin time stamp}

    {CONTENT_WML}

    {VARIABLE_OP TIME_ACTIONS_time_end time stamp}

    {VARIABLE timed_actions_ms $TIME_ACTIONS_time_end}
    {VARIABLE_OP timed_actions_ms add "-$TIME_ACTIONS_time_begin"}

    {CLEAR_VARIABLE TIME_ACTIONS_time_begin}
    {CLEAR_VARIABLE TIME_ACTIONS_time_end}
#enddef

#define FLOATING_TEXT FILTER COLOR_VALUE TEXT
    {DEPRECATE FLOATING_TEXT 1.9.4}

    # Floats the given text above the given unit in the same manner as
    # damage numbers are displayed in combat.  For example when a unit
    # steps on a hidden trap and is dealt 8 damage, let's show this to
    # the player like all other damage is:
    #! {FLOATING_TEXT x,y=$x1,$y1 255,0,0 "8"}
    [store_unit]
        [filter]
            {FILTER}
        [/filter]

        kill=no
        variable=FLOATING_TEXT_temp
    [/store_unit]

    [unstore_unit]
        variable=FLOATING_TEXT_temp
        find_vacant=no
        red,green,blue={COLOR_VALUE}
        text={TEXT}
    [/unstore_unit]

    {CLEAR_VARIABLE FLOATING_TEXT_temp}
#enddef
