/*
* generated by Xtext
*/
package org.wesnoth.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.wesnoth.services.WMLGrammarAccess;

public class WMLParser extends AbstractContentAssistParser {
	
	@Inject
	private WMLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.wesnoth.ui.contentassist.antlr.internal.InternalWMLParser createParser() {
		org.wesnoth.ui.contentassist.antlr.internal.InternalWMLParser result = new org.wesnoth.ui.contentassist.antlr.internal.InternalWMLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getPreprocessorAccess().getAlternatives(), "rule__Preprocessor__Alternatives");
					put(grammarAccess.getPathIncludeAccess().getPathAlternatives_1_0(), "rule__PathInclude__PathAlternatives_1_0");
					put(grammarAccess.getRootTagAccess().getAlternatives(), "rule__RootTag__Alternatives");
					put(grammarAccess.getAttributesAccess().getAttrValueAlternatives_2_0(), "rule__Attributes__AttrValueAlternatives_2_0");
					put(grammarAccess.getTextDomainAccess().getGroup(), "rule__TextDomain__Group__0");
					put(grammarAccess.getMacroAccess().getGroup(), "rule__Macro__Group__0");
					put(grammarAccess.getPathIncludeAccess().getGroup(), "rule__PathInclude__Group__0");
					put(grammarAccess.getRootTypeAccess().getGroup_0(), "rule__RootType__Group_0__0");
					put(grammarAccess.getRootTypeAccess().getGroup_2(), "rule__RootType__Group_2__0");
					put(grammarAccess.getSimpleTagAccess().getGroup(), "rule__SimpleTag__Group__0");
					put(grammarAccess.getAddedTagAccess().getGroup(), "rule__AddedTag__Group__0");
					put(grammarAccess.getAttributesAccess().getGroup(), "rule__Attributes__Group__0");
					put(grammarAccess.getTSTRINGAccess().getGroup(), "rule__TSTRING__Group__0");
					put(grammarAccess.getHOMEPATHAccess().getGroup(), "rule__HOMEPATH__Group__0");
					put(grammarAccess.getRootAccess().getTextdomainsAssignment_0(), "rule__Root__TextdomainsAssignment_0");
					put(grammarAccess.getRootAccess().getPreprocAssignment_1(), "rule__Root__PreprocAssignment_1");
					put(grammarAccess.getRootAccess().getRootsAssignment_2(), "rule__Root__RootsAssignment_2");
					put(grammarAccess.getTextDomainAccess().getDomainNameAssignment_1(), "rule__TextDomain__DomainNameAssignment_1");
					put(grammarAccess.getMacroAccess().getMacroNameAssignment_1(), "rule__Macro__MacroNameAssignment_1");
					put(grammarAccess.getPathIncludeAccess().getPathAssignment_1(), "rule__PathInclude__PathAssignment_1");
					put(grammarAccess.getRootTypeAccess().getStartTagAssignment_0_1(), "rule__RootType__StartTagAssignment_0_1");
					put(grammarAccess.getRootTypeAccess().getSubTypesAssignment_0_3(), "rule__RootType__SubTypesAssignment_0_3");
					put(grammarAccess.getRootTypeAccess().getAtAssignment_1(), "rule__RootType__AtAssignment_1");
					put(grammarAccess.getRootTypeAccess().getOkpreprocAssignment_2_0(), "rule__RootType__OkpreprocAssignment_2_0");
					put(grammarAccess.getRootTypeAccess().getEndTagAssignment_2_3(), "rule__RootType__EndTagAssignment_2_3");
					put(grammarAccess.getSimpleTagAccess().getEndTagAssignment_0(), "rule__SimpleTag__EndTagAssignment_0");
					put(grammarAccess.getSimpleTagAccess().getTagNameAssignment_1(), "rule__SimpleTag__TagNameAssignment_1");
					put(grammarAccess.getAddedTagAccess().getTagNameAssignment_1(), "rule__AddedTag__TagNameAssignment_1");
					put(grammarAccess.getAttributesAccess().getAttrNameAssignment_0(), "rule__Attributes__AttrNameAssignment_0");
					put(grammarAccess.getAttributesAccess().getAttrValueAssignment_2(), "rule__Attributes__AttrValueAssignment_2");
					put(grammarAccess.getRootAccess().getUnorderedGroup(), "rule__Root__UnorderedGroup");
					put(grammarAccess.getRootTypeAccess().getUnorderedGroup(), "rule__RootType__UnorderedGroup");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.wesnoth.ui.contentassist.antlr.internal.InternalWMLParser typedParser = (org.wesnoth.ui.contentassist.antlr.internal.InternalWMLParser) parser;
			typedParser.entryRuleRoot();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_SL_COMMENT" };
	}
	
	public WMLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(WMLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
