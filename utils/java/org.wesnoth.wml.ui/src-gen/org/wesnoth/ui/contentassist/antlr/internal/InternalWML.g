/*
* generated by Xtext
*/
grammar InternalWML;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.wesnoth.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.wesnoth.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.wesnoth.services.WMLGrammarAccess;

}

@parser::members {
 
 	private WMLGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(WMLGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleWMLRoot
entryRuleWMLRoot 
:
{ before(grammarAccess.getWMLRootRule()); }
	 ruleWMLRoot
{ after(grammarAccess.getWMLRootRule()); } 
	 EOF 
;

// Rule WMLRoot
ruleWMLRoot
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWMLRootAccess().getAlternatives()); }
(rule__WMLRoot__Alternatives)*
{ after(grammarAccess.getWMLRootAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWMLMacro
entryRuleWMLMacro 
:
{ before(grammarAccess.getWMLMacroRule()); }
	 ruleWMLMacro
{ after(grammarAccess.getWMLMacroRule()); } 
	 EOF 
;

// Rule WMLMacro
ruleWMLMacro
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWMLMacroAccess().getGroup()); }
(rule__WMLMacro__Group__0)
{ after(grammarAccess.getWMLMacroAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWMLTag
entryRuleWMLTag 
:
{ before(grammarAccess.getWMLTagRule()); }
	 ruleWMLTag
{ after(grammarAccess.getWMLTagRule()); } 
	 EOF 
;

// Rule WMLTag
ruleWMLTag
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWMLTagAccess().getGroup()); }
(rule__WMLTag__Group__0)
{ after(grammarAccess.getWMLTagAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWMLStartTag
entryRuleWMLStartTag 
:
{ before(grammarAccess.getWMLStartTagRule()); }
	 ruleWMLStartTag
{ after(grammarAccess.getWMLStartTagRule()); } 
	 EOF 
;

// Rule WMLStartTag
ruleWMLStartTag
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWMLStartTagAccess().getGroup()); }
(rule__WMLStartTag__Group__0)
{ after(grammarAccess.getWMLStartTagAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWMLEndTag
entryRuleWMLEndTag 
:
{ before(grammarAccess.getWMLEndTagRule()); }
	 ruleWMLEndTag
{ after(grammarAccess.getWMLEndTagRule()); } 
	 EOF 
;

// Rule WMLEndTag
ruleWMLEndTag
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWMLEndTagAccess().getGroup()); }
(rule__WMLEndTag__Group__0)
{ after(grammarAccess.getWMLEndTagAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWMLKey
entryRuleWMLKey 
:
{ before(grammarAccess.getWMLKeyRule()); }
	 ruleWMLKey
{ after(grammarAccess.getWMLKeyRule()); } 
	 EOF 
;

// Rule WMLKey
ruleWMLKey
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWMLKeyAccess().getGroup()); }
(rule__WMLKey__Group__0)
{ after(grammarAccess.getWMLKeyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFLOAT
entryRuleFLOAT 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getFLOATRule()); }
	 ruleFLOAT
{ after(grammarAccess.getFLOATRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule FLOAT
ruleFLOAT
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFLOATAccess().getGroup()); }
(rule__FLOAT__Group__0)
{ after(grammarAccess.getFLOATAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}




rule__WMLRoot__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWMLRootAccess().getRtagsAssignment_0()); }
(rule__WMLRoot__RtagsAssignment_0)
{ after(grammarAccess.getWMLRootAccess().getRtagsAssignment_0()); }
)

    |(
{ before(grammarAccess.getWMLRootAccess().getRmacrosAssignment_1()); }
(rule__WMLRoot__RmacrosAssignment_1)
{ after(grammarAccess.getWMLRootAccess().getRmacrosAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WMLTag__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWMLTagAccess().getTtagsAssignment_1_0()); }
(rule__WMLTag__TtagsAssignment_1_0)
{ after(grammarAccess.getWMLTagAccess().getTtagsAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getWMLTagAccess().getTkeysAssignment_1_1()); }
(rule__WMLTag__TkeysAssignment_1_1)
{ after(grammarAccess.getWMLTagAccess().getTkeysAssignment_1_1()); }
)

    |(
{ before(grammarAccess.getWMLTagAccess().getTmacrosAssignment_1_2()); }
(rule__WMLTag__TmacrosAssignment_1_2)
{ after(grammarAccess.getWMLTagAccess().getTmacrosAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WMLKey__KeyValueAlternatives_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWMLKeyAccess().getKeyValueIDTerminalRuleCall_2_0_0()); }
	RULE_ID
{ after(grammarAccess.getWMLKeyAccess().getKeyValueIDTerminalRuleCall_2_0_0()); }
)

    |(
{ before(grammarAccess.getWMLKeyAccess().getKeyValueSTRINGTerminalRuleCall_2_0_1()); }
	RULE_STRING
{ after(grammarAccess.getWMLKeyAccess().getKeyValueSTRINGTerminalRuleCall_2_0_1()); }
)

    |(
{ before(grammarAccess.getWMLKeyAccess().getKeyValueFLOATParserRuleCall_2_0_2()); }
	ruleFLOAT
{ after(grammarAccess.getWMLKeyAccess().getKeyValueFLOATParserRuleCall_2_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__WMLMacro__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WMLMacro__Group__0__Impl
	rule__WMLMacro__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WMLMacro__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWMLMacroAccess().getLeftCurlyBracketKeyword_0()); }

	'{' 

{ after(grammarAccess.getWMLMacroAccess().getLeftCurlyBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WMLMacro__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WMLMacro__Group__1__Impl
	rule__WMLMacro__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WMLMacro__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getWMLMacroAccess().getTagcontentAssignment_1()); }
(rule__WMLMacro__TagcontentAssignment_1)
{ after(grammarAccess.getWMLMacroAccess().getTagcontentAssignment_1()); }
)
(
{ before(grammarAccess.getWMLMacroAccess().getTagcontentAssignment_1()); }
(rule__WMLMacro__TagcontentAssignment_1)*
{ after(grammarAccess.getWMLMacroAccess().getTagcontentAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WMLMacro__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WMLMacro__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WMLMacro__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWMLMacroAccess().getRightCurlyBracketKeyword_2()); }

	'}' 

{ after(grammarAccess.getWMLMacroAccess().getRightCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__WMLTag__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WMLTag__Group__0__Impl
	rule__WMLTag__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WMLTag__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWMLTagAccess().getStartAssignment_0()); }
(rule__WMLTag__StartAssignment_0)
{ after(grammarAccess.getWMLTagAccess().getStartAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WMLTag__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WMLTag__Group__1__Impl
	rule__WMLTag__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WMLTag__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWMLTagAccess().getAlternatives_1()); }
(rule__WMLTag__Alternatives_1)*
{ after(grammarAccess.getWMLTagAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WMLTag__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WMLTag__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WMLTag__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWMLTagAccess().getEndAssignment_2()); }
(rule__WMLTag__EndAssignment_2)
{ after(grammarAccess.getWMLTagAccess().getEndAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__WMLStartTag__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WMLStartTag__Group__0__Impl
	rule__WMLStartTag__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WMLStartTag__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWMLStartTagAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getWMLStartTagAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WMLStartTag__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WMLStartTag__Group__1__Impl
	rule__WMLStartTag__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WMLStartTag__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWMLStartTagAccess().getTagnameAssignment_1()); }
(rule__WMLStartTag__TagnameAssignment_1)
{ after(grammarAccess.getWMLStartTagAccess().getTagnameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WMLStartTag__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WMLStartTag__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WMLStartTag__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWMLStartTagAccess().getRightSquareBracketKeyword_2()); }

	']' 

{ after(grammarAccess.getWMLStartTagAccess().getRightSquareBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__WMLEndTag__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WMLEndTag__Group__0__Impl
	rule__WMLEndTag__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WMLEndTag__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWMLEndTagAccess().getLeftSquareBracketSolidusKeyword_0()); }

	'[/' 

{ after(grammarAccess.getWMLEndTagAccess().getLeftSquareBracketSolidusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WMLEndTag__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WMLEndTag__Group__1__Impl
	rule__WMLEndTag__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WMLEndTag__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWMLEndTagAccess().getTagnameAssignment_1()); }
(rule__WMLEndTag__TagnameAssignment_1)
{ after(grammarAccess.getWMLEndTagAccess().getTagnameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WMLEndTag__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WMLEndTag__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WMLEndTag__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWMLEndTagAccess().getRightSquareBracketKeyword_2()); }

	']' 

{ after(grammarAccess.getWMLEndTagAccess().getRightSquareBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__WMLKey__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WMLKey__Group__0__Impl
	rule__WMLKey__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WMLKey__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWMLKeyAccess().getKeyNameAssignment_0()); }
(rule__WMLKey__KeyNameAssignment_0)
{ after(grammarAccess.getWMLKeyAccess().getKeyNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WMLKey__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WMLKey__Group__1__Impl
	rule__WMLKey__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WMLKey__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWMLKeyAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getWMLKeyAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WMLKey__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WMLKey__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WMLKey__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWMLKeyAccess().getKeyValueAssignment_2()); }
(rule__WMLKey__KeyValueAssignment_2)
{ after(grammarAccess.getWMLKeyAccess().getKeyValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FLOAT__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FLOAT__Group__0__Impl
	rule__FLOAT__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFLOATAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
{ after(grammarAccess.getFLOATAccess().getINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FLOAT__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FLOAT__Group__1__Impl
	rule__FLOAT__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFLOATAccess().getFullStopKeyword_1()); }

	'.' 

{ after(grammarAccess.getFLOATAccess().getFullStopKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FLOAT__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FLOAT__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getFLOATAccess().getINTTerminalRuleCall_2()); }
(	RULE_INT)
{ after(grammarAccess.getFLOATAccess().getINTTerminalRuleCall_2()); }
)
(
{ before(grammarAccess.getFLOATAccess().getINTTerminalRuleCall_2()); }
(	RULE_INT)*
{ after(grammarAccess.getFLOATAccess().getINTTerminalRuleCall_2()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}









rule__WMLRoot__RtagsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWMLRootAccess().getRtagsWMLTagParserRuleCall_0_0()); }
	ruleWMLTag{ after(grammarAccess.getWMLRootAccess().getRtagsWMLTagParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WMLRoot__RmacrosAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWMLRootAccess().getRmacrosWMLMacroParserRuleCall_1_0()); }
	ruleWMLMacro{ after(grammarAccess.getWMLRootAccess().getRmacrosWMLMacroParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WMLMacro__TagcontentAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWMLMacroAccess().getTagcontentIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getWMLMacroAccess().getTagcontentIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WMLTag__StartAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWMLTagAccess().getStartWMLStartTagParserRuleCall_0_0()); }
	ruleWMLStartTag{ after(grammarAccess.getWMLTagAccess().getStartWMLStartTagParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WMLTag__TtagsAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWMLTagAccess().getTtagsWMLTagParserRuleCall_1_0_0()); }
	ruleWMLTag{ after(grammarAccess.getWMLTagAccess().getTtagsWMLTagParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WMLTag__TkeysAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWMLTagAccess().getTkeysWMLKeyParserRuleCall_1_1_0()); }
	ruleWMLKey{ after(grammarAccess.getWMLTagAccess().getTkeysWMLKeyParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WMLTag__TmacrosAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWMLTagAccess().getTmacrosWMLMacroParserRuleCall_1_2_0()); }
	ruleWMLMacro{ after(grammarAccess.getWMLTagAccess().getTmacrosWMLMacroParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WMLTag__EndAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWMLTagAccess().getEndWMLEndTagParserRuleCall_2_0()); }
	ruleWMLEndTag{ after(grammarAccess.getWMLTagAccess().getEndWMLEndTagParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WMLStartTag__TagnameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWMLStartTagAccess().getTagnameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getWMLStartTagAccess().getTagnameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WMLEndTag__TagnameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWMLEndTagAccess().getTagnameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getWMLEndTagAccess().getTagnameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WMLKey__KeyNameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWMLKeyAccess().getKeyNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getWMLKeyAccess().getKeyNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WMLKey__KeyValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWMLKeyAccess().getKeyValueAlternatives_2_0()); }
(rule__WMLKey__KeyValueAlternatives_2_0)
{ after(grammarAccess.getWMLKeyAccess().getKeyValueAlternatives_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_SL_COMMENT : '#' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ID : ('a'..'z'|'A'..'Z'|'_'|' '|'0'..'9')*;

RULE_IDENH : ('a'..'z'|'A'..'Z'|'_') (' '|'a'..'z'|'A'..'Z'|'_'|'0'..'9')* ('a'..'z'|'A'..'Z');

RULE_INT : ('0'..'9')+;

RULE_STRING : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"';


