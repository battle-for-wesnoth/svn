/*
* generated by Xtext
*/

package org.wesnoth.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class WMLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class WMLRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLRoot");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTagsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTagsWMLTagParserRuleCall_0_0 = (RuleCall)cTagsAssignment_0.eContents().get(0);
		private final Assignment cMacrosAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cMacrosWMLMacroParserRuleCall_1_0 = (RuleCall)cMacrosAssignment_1.eContents().get(0);
		
		////TODO: add cross-reference for variables
		////handles TODO:
		//WMLRoot:
		//	(Tags+=WMLTag | Macros+=WMLMacro)*;
		public ParserRule getRule() { return rule; }

		//(Tags+=WMLTag | Macros+=WMLMacro)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//Tags+=WMLTag
		public Assignment getTagsAssignment_0() { return cTagsAssignment_0; }

		//WMLTag
		public RuleCall getTagsWMLTagParserRuleCall_0_0() { return cTagsWMLTagParserRuleCall_0_0; }

		//Macros+=WMLMacro
		public Assignment getMacrosAssignment_1() { return cMacrosAssignment_1; }

		//WMLMacro
		public RuleCall getMacrosWMLMacroParserRuleCall_1_0() { return cMacrosWMLMacroParserRuleCall_1_0; }
	}

	public class WMLTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPlusAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cPlusPlusSignKeyword_1_0 = (Keyword)cPlusAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cTagsAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cTagsWMLTagParserRuleCall_4_0_0 = (RuleCall)cTagsAssignment_4_0.eContents().get(0);
		private final Assignment cKeysAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cKeysWMLKeyParserRuleCall_4_1_0 = (RuleCall)cKeysAssignment_4_1.eContents().get(0);
		private final Assignment cMacrosAssignment_4_2 = (Assignment)cAlternatives_4.eContents().get(2);
		private final RuleCall cMacrosWMLMacroParserRuleCall_4_2_0 = (RuleCall)cMacrosAssignment_4_2.eContents().get(0);
		private final Keyword cLeftSquareBracketSolidusKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cEndNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cEndNameIDTerminalRuleCall_6_0 = (RuleCall)cEndNameAssignment_6.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//WMLTag:
		//	"[" plus?="+"? name=ID "]" (Tags+=WMLTag | Keys+=WMLKey | Macros+=WMLMacro)* "[/" endName=ID "]";
		public ParserRule getRule() { return rule; }

		//"[" plus?="+"? name=ID "]" (Tags+=WMLTag | Keys+=WMLKey | Macros+=WMLMacro)* "[/" endName=ID "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//plus?="+"?
		public Assignment getPlusAssignment_1() { return cPlusAssignment_1; }

		//"+"
		public Keyword getPlusPlusSignKeyword_1_0() { return cPlusPlusSignKeyword_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }

		//(Tags+=WMLTag | Keys+=WMLKey | Macros+=WMLMacro)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//Tags+=WMLTag
		public Assignment getTagsAssignment_4_0() { return cTagsAssignment_4_0; }

		//WMLTag
		public RuleCall getTagsWMLTagParserRuleCall_4_0_0() { return cTagsWMLTagParserRuleCall_4_0_0; }

		//Keys+=WMLKey
		public Assignment getKeysAssignment_4_1() { return cKeysAssignment_4_1; }

		//WMLKey
		public RuleCall getKeysWMLKeyParserRuleCall_4_1_0() { return cKeysWMLKeyParserRuleCall_4_1_0; }

		//Macros+=WMLMacro
		public Assignment getMacrosAssignment_4_2() { return cMacrosAssignment_4_2; }

		//WMLMacro
		public RuleCall getMacrosWMLMacroParserRuleCall_4_2_0() { return cMacrosWMLMacroParserRuleCall_4_2_0; }

		//"[/"
		public Keyword getLeftSquareBracketSolidusKeyword_5() { return cLeftSquareBracketSolidusKeyword_5; }

		//endName=ID
		public Assignment getEndNameAssignment_6() { return cEndNameAssignment_6; }

		//ID
		public RuleCall getEndNameIDTerminalRuleCall_6_0() { return cEndNameIDTerminalRuleCall_6_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }
	}

	public class WMLKeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLKey");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueWMLKeyValueRuleParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cPlusSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExtraMacrosAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExtraMacrosWMLMacroParserRuleCall_3_1_0 = (RuleCall)cExtraMacrosAssignment_3_1.eContents().get(0);
		
		//// (',' name += ID)*
		//WMLKey:
		//	name=ID "=" value+=WMLKeyValueRule+ ("+" extraMacros+=WMLMacro)*;
		public ParserRule getRule() { return rule; }

		//name=ID "=" value+=WMLKeyValueRule+ ("+" extraMacros+=WMLMacro)*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value+=WMLKeyValueRule+
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//WMLKeyValueRule
		public RuleCall getValueWMLKeyValueRuleParserRuleCall_2_0() { return cValueWMLKeyValueRuleParserRuleCall_2_0; }

		//("+" extraMacros+=WMLMacro)*
		public Group getGroup_3() { return cGroup_3; }

		//"+"
		public Keyword getPlusSignKeyword_3_0() { return cPlusSignKeyword_3_0; }

		//extraMacros+=WMLMacro
		public Assignment getExtraMacrosAssignment_3_1() { return cExtraMacrosAssignment_3_1; }

		//WMLMacro
		public RuleCall getExtraMacrosWMLMacroParserRuleCall_3_1_0() { return cExtraMacrosWMLMacroParserRuleCall_3_1_0; }
	}

	public class WMLKeyValueRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLKeyValueRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWMLKeyValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWMLMacroParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWMLLuaCodeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//WMLKeyValueRule:
		//	WMLKeyValue | WMLMacro | WMLLuaCode;
		public ParserRule getRule() { return rule; }

		//WMLKeyValue | WMLMacro | WMLLuaCode
		public Alternatives getAlternatives() { return cAlternatives; }

		//WMLKeyValue
		public RuleCall getWMLKeyValueParserRuleCall_0() { return cWMLKeyValueParserRuleCall_0; }

		//WMLMacro
		public RuleCall getWMLMacroParserRuleCall_1() { return cWMLMacroParserRuleCall_1; }

		//WMLLuaCode
		public RuleCall getWMLLuaCodeParserRuleCall_2() { return cWMLLuaCodeParserRuleCall_2; }
	}

	public class WMLKeyValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLKeyValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final RuleCall cValueIDTerminalRuleCall_0_0 = (RuleCall)cValueAlternatives_0.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_1 = (RuleCall)cValueAlternatives_0.eContents().get(1);
		private final RuleCall cValueANY_OTHERTerminalRuleCall_0_2 = (RuleCall)cValueAlternatives_0.eContents().get(2);
		private final RuleCall cValueT_STRINGParserRuleCall_0_3 = (RuleCall)cValueAlternatives_0.eContents().get(3);
		
		//WMLKeyValue:
		//	value=(ID | STRING | ANY_OTHER | T_STRING);
		public ParserRule getRule() { return rule; }

		//value=(ID | STRING | ANY_OTHER | T_STRING)
		public Assignment getValueAssignment() { return cValueAssignment; }

		//ID | STRING | ANY_OTHER | T_STRING
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }

		//ID
		public RuleCall getValueIDTerminalRuleCall_0_0() { return cValueIDTerminalRuleCall_0_0; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_1() { return cValueSTRINGTerminalRuleCall_0_1; }

		//ANY_OTHER
		public RuleCall getValueANY_OTHERTerminalRuleCall_0_2() { return cValueANY_OTHERTerminalRuleCall_0_2; }

		//T_STRING
		public RuleCall getValueT_STRINGParserRuleCall_0_3() { return cValueT_STRINGParserRuleCall_0_3; }
	}

	public class WMLMacroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLMacro");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameRULE_MACROTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//WMLMacro:
		//	name=RULE_MACRO;
		public ParserRule getRule() { return rule; }

		//name=RULE_MACRO
		public Assignment getNameAssignment() { return cNameAssignment; }

		//RULE_MACRO
		public RuleCall getNameRULE_MACROTerminalRuleCall_0() { return cNameRULE_MACROTerminalRuleCall_0; }
	}

	public class WMLLuaCodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLLuaCode");
		private final Assignment cCodeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCodeRULE_LUA_CODETerminalRuleCall_0 = (RuleCall)cCodeAssignment.eContents().get(0);
		
		//WMLLuaCode:
		//	code=RULE_LUA_CODE;
		public ParserRule getRule() { return rule; }

		//code=RULE_LUA_CODE
		public Assignment getCodeAssignment() { return cCodeAssignment; }

		//RULE_LUA_CODE
		public RuleCall getCodeRULE_LUA_CODETerminalRuleCall_0() { return cCodeRULE_LUA_CODETerminalRuleCall_0; }
	}

	public class T_STRINGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "T_STRING");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c_Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//T_STRING returns ecore::EString:
		//	"_" STRING;
		public ParserRule getRule() { return rule; }

		//"_" STRING
		public Group getGroup() { return cGroup; }

		//"_"
		public Keyword get_Keyword_0() { return c_Keyword_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}
	
	
	private WMLRootElements pWMLRoot;
	private WMLTagElements pWMLTag;
	private WMLKeyElements pWMLKey;
	private WMLKeyValueRuleElements pWMLKeyValueRule;
	private WMLKeyValueElements pWMLKeyValue;
	private WMLMacroElements pWMLMacro;
	private WMLLuaCodeElements pWMLLuaCode;
	private T_STRINGElements pT_STRING;
	private TerminalRule tRULE_LUA_CODE;
	private TerminalRule tRULE_MACRO;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tID;
	private TerminalRule tSTRING;
	private TerminalRule tWS;
	private TerminalRule tANY_OTHER;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public WMLGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	////TODO: add cross-reference for variables
	////handles TODO:
	//WMLRoot:
	//	(Tags+=WMLTag | Macros+=WMLMacro)*;
	public WMLRootElements getWMLRootAccess() {
		return (pWMLRoot != null) ? pWMLRoot : (pWMLRoot = new WMLRootElements());
	}
	
	public ParserRule getWMLRootRule() {
		return getWMLRootAccess().getRule();
	}

	//WMLTag:
	//	"[" plus?="+"? name=ID "]" (Tags+=WMLTag | Keys+=WMLKey | Macros+=WMLMacro)* "[/" endName=ID "]";
	public WMLTagElements getWMLTagAccess() {
		return (pWMLTag != null) ? pWMLTag : (pWMLTag = new WMLTagElements());
	}
	
	public ParserRule getWMLTagRule() {
		return getWMLTagAccess().getRule();
	}

	//// (',' name += ID)*
	//WMLKey:
	//	name=ID "=" value+=WMLKeyValueRule+ ("+" extraMacros+=WMLMacro)*;
	public WMLKeyElements getWMLKeyAccess() {
		return (pWMLKey != null) ? pWMLKey : (pWMLKey = new WMLKeyElements());
	}
	
	public ParserRule getWMLKeyRule() {
		return getWMLKeyAccess().getRule();
	}

	//WMLKeyValueRule:
	//	WMLKeyValue | WMLMacro | WMLLuaCode;
	public WMLKeyValueRuleElements getWMLKeyValueRuleAccess() {
		return (pWMLKeyValueRule != null) ? pWMLKeyValueRule : (pWMLKeyValueRule = new WMLKeyValueRuleElements());
	}
	
	public ParserRule getWMLKeyValueRuleRule() {
		return getWMLKeyValueRuleAccess().getRule();
	}

	//WMLKeyValue:
	//	value=(ID | STRING | ANY_OTHER | T_STRING);
	public WMLKeyValueElements getWMLKeyValueAccess() {
		return (pWMLKeyValue != null) ? pWMLKeyValue : (pWMLKeyValue = new WMLKeyValueElements());
	}
	
	public ParserRule getWMLKeyValueRule() {
		return getWMLKeyValueAccess().getRule();
	}

	//WMLMacro:
	//	name=RULE_MACRO;
	public WMLMacroElements getWMLMacroAccess() {
		return (pWMLMacro != null) ? pWMLMacro : (pWMLMacro = new WMLMacroElements());
	}
	
	public ParserRule getWMLMacroRule() {
		return getWMLMacroAccess().getRule();
	}

	//WMLLuaCode:
	//	code=RULE_LUA_CODE;
	public WMLLuaCodeElements getWMLLuaCodeAccess() {
		return (pWMLLuaCode != null) ? pWMLLuaCode : (pWMLLuaCode = new WMLLuaCodeElements());
	}
	
	public ParserRule getWMLLuaCodeRule() {
		return getWMLLuaCodeAccess().getRule();
	}

	//T_STRING returns ecore::EString:
	//	"_" STRING;
	public T_STRINGElements getT_STRINGAccess() {
		return (pT_STRING != null) ? pT_STRING : (pT_STRING = new T_STRINGElements());
	}
	
	public ParserRule getT_STRINGRule() {
		return getT_STRINGAccess().getRule();
	}

	//terminal RULE_LUA_CODE:
	//	"<<"->">>";
	public TerminalRule getRULE_LUA_CODERule() {
		return (tRULE_LUA_CODE != null) ? tRULE_LUA_CODE : (tRULE_LUA_CODE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RULE_LUA_CODE"));
	} 

	//terminal RULE_MACRO:
	//	"{"->"}";
	public TerminalRule getRULE_MACRORule() {
		return (tRULE_MACRO != null) ? tRULE_MACRO : (tRULE_MACRO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RULE_MACRO"));
	} 

	//terminal SL_COMMENT:
	//	"#" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal ID:
	//	("a".."z" | "A".."Z" | "0".."9" | "_")+;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
