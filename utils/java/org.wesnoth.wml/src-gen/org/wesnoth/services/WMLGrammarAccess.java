/*
* generated by Xtext
*/

package org.wesnoth.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class WMLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class WMLRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLRoot");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cRtagsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cRtagsWMLTagParserRuleCall_0_0 = (RuleCall)cRtagsAssignment_0.eContents().get(0);
		private final Assignment cRmacrosAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cRmacrosWMLMacroParserRuleCall_1_0 = (RuleCall)cRmacrosAssignment_1.eContents().get(0);
		
		//WMLRoot:
		//	(Rtags+=WMLTag | Rmacros+=WMLMacro)*;
		public ParserRule getRule() { return rule; }

		//(Rtags+=WMLTag | Rmacros+=WMLMacro)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//Rtags+=WMLTag
		public Assignment getRtagsAssignment_0() { return cRtagsAssignment_0; }

		//WMLTag
		public RuleCall getRtagsWMLTagParserRuleCall_0_0() { return cRtagsWMLTagParserRuleCall_0_0; }

		//Rmacros+=WMLMacro
		public Assignment getRmacrosAssignment_1() { return cRmacrosAssignment_1; }

		//WMLMacro
		public RuleCall getRmacrosWMLMacroParserRuleCall_1_0() { return cRmacrosWMLMacroParserRuleCall_1_0; }
	}

	public class WMLMacroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLMacro");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTagcontentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTagcontentIDTerminalRuleCall_1_0 = (RuleCall)cTagcontentAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//WMLMacro:
		//	"{" tagcontent+=ID+ "}";
		public ParserRule getRule() { return rule; }

		//"{" tagcontent+=ID+ "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//tagcontent+=ID+
		public Assignment getTagcontentAssignment_1() { return cTagcontentAssignment_1; }

		//ID
		public RuleCall getTagcontentIDTerminalRuleCall_1_0() { return cTagcontentIDTerminalRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class WMLTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStartWMLStartTagParserRuleCall_0_0 = (RuleCall)cStartAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cTtagsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cTtagsWMLTagParserRuleCall_1_0_0 = (RuleCall)cTtagsAssignment_1_0.eContents().get(0);
		private final Assignment cTkeysAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cTkeysWMLKeyParserRuleCall_1_1_0 = (RuleCall)cTkeysAssignment_1_1.eContents().get(0);
		private final Assignment cTmacrosAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cTmacrosWMLMacroParserRuleCall_1_2_0 = (RuleCall)cTmacrosAssignment_1_2.eContents().get(0);
		private final Assignment cEndAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEndWMLEndTagParserRuleCall_2_0 = (RuleCall)cEndAssignment_2.eContents().get(0);
		
		//WMLTag:
		//	start=WMLStartTag (Ttags+=WMLTag | Tkeys+=WMLKey | Tmacros+=WMLMacro)* end=WMLEndTag;
		public ParserRule getRule() { return rule; }

		//start=WMLStartTag (Ttags+=WMLTag | Tkeys+=WMLKey | Tmacros+=WMLMacro)* end=WMLEndTag
		public Group getGroup() { return cGroup; }

		//start=WMLStartTag
		public Assignment getStartAssignment_0() { return cStartAssignment_0; }

		//WMLStartTag
		public RuleCall getStartWMLStartTagParserRuleCall_0_0() { return cStartWMLStartTagParserRuleCall_0_0; }

		//(Ttags+=WMLTag | Tkeys+=WMLKey | Tmacros+=WMLMacro)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//Ttags+=WMLTag
		public Assignment getTtagsAssignment_1_0() { return cTtagsAssignment_1_0; }

		//WMLTag
		public RuleCall getTtagsWMLTagParserRuleCall_1_0_0() { return cTtagsWMLTagParserRuleCall_1_0_0; }

		//Tkeys+=WMLKey
		public Assignment getTkeysAssignment_1_1() { return cTkeysAssignment_1_1; }

		//WMLKey
		public RuleCall getTkeysWMLKeyParserRuleCall_1_1_0() { return cTkeysWMLKeyParserRuleCall_1_1_0; }

		//Tmacros+=WMLMacro
		public Assignment getTmacrosAssignment_1_2() { return cTmacrosAssignment_1_2; }

		//WMLMacro
		public RuleCall getTmacrosWMLMacroParserRuleCall_1_2_0() { return cTmacrosWMLMacroParserRuleCall_1_2_0; }

		//end=WMLEndTag
		public Assignment getEndAssignment_2() { return cEndAssignment_2; }

		//WMLEndTag
		public RuleCall getEndWMLEndTagParserRuleCall_2_0() { return cEndWMLEndTagParserRuleCall_2_0; }
	}

	public class WMLStartTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLStartTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTagnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTagnameIDTerminalRuleCall_1_0 = (RuleCall)cTagnameAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//WMLStartTag:
		//	"[" tagname=ID "]";
		public ParserRule getRule() { return rule; }

		//"[" tagname=ID "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//tagname=ID
		public Assignment getTagnameAssignment_1() { return cTagnameAssignment_1; }

		//ID
		public RuleCall getTagnameIDTerminalRuleCall_1_0() { return cTagnameIDTerminalRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class WMLEndTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLEndTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketSolidusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTagnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTagnameIDTerminalRuleCall_1_0 = (RuleCall)cTagnameAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//WMLEndTag:
		//	"[/" tagname=ID "]";
		public ParserRule getRule() { return rule; }

		//"[/" tagname=ID "]"
		public Group getGroup() { return cGroup; }

		//"[/"
		public Keyword getLeftSquareBracketSolidusKeyword_0() { return cLeftSquareBracketSolidusKeyword_0; }

		//tagname=ID
		public Assignment getTagnameAssignment_1() { return cTagnameAssignment_1; }

		//ID
		public RuleCall getTagnameIDTerminalRuleCall_1_0() { return cTagnameIDTerminalRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class WMLKeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLKey");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyNameIDTerminalRuleCall_0_0 = (RuleCall)cKeyNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cKeyValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cKeyValueAlternatives_2_0 = (Alternatives)cKeyValueAssignment_2.eContents().get(0);
		private final RuleCall cKeyValueIDTerminalRuleCall_2_0_0 = (RuleCall)cKeyValueAlternatives_2_0.eContents().get(0);
		private final RuleCall cKeyValueSTRINGTerminalRuleCall_2_0_1 = (RuleCall)cKeyValueAlternatives_2_0.eContents().get(1);
		private final RuleCall cKeyValueFLOATParserRuleCall_2_0_2 = (RuleCall)cKeyValueAlternatives_2_0.eContents().get(2);
		
		//WMLKey:
		//	keyName=ID "=" keyValue=(ID | STRING | FLOAT);
		public ParserRule getRule() { return rule; }

		//keyName=ID "=" keyValue=(ID | STRING | FLOAT)
		public Group getGroup() { return cGroup; }

		//keyName=ID
		public Assignment getKeyNameAssignment_0() { return cKeyNameAssignment_0; }

		//ID
		public RuleCall getKeyNameIDTerminalRuleCall_0_0() { return cKeyNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//keyValue=(ID | STRING | FLOAT)
		public Assignment getKeyValueAssignment_2() { return cKeyValueAssignment_2; }

		//ID | STRING | FLOAT
		public Alternatives getKeyValueAlternatives_2_0() { return cKeyValueAlternatives_2_0; }

		//ID
		public RuleCall getKeyValueIDTerminalRuleCall_2_0_0() { return cKeyValueIDTerminalRuleCall_2_0_0; }

		//STRING
		public RuleCall getKeyValueSTRINGTerminalRuleCall_2_0_1() { return cKeyValueSTRINGTerminalRuleCall_2_0_1; }

		//FLOAT
		public RuleCall getKeyValueFLOATParserRuleCall_2_0_2() { return cKeyValueFLOATParserRuleCall_2_0_2; }
	}

	public class FLOATElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//FLOAT returns ecore::EString hidden():
		//	INT "." INT+;
		public ParserRule getRule() { return rule; }

		//INT "." INT+
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//INT+
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	
	
	private WMLRootElements pWMLRoot;
	private WMLMacroElements pWMLMacro;
	private WMLTagElements pWMLTag;
	private WMLStartTagElements pWMLStartTag;
	private WMLEndTagElements pWMLEndTag;
	private WMLKeyElements pWMLKey;
	private FLOATElements pFLOAT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tID;
	private TerminalRule tIDENH;
	private TerminalRule tINT;
	private TerminalRule tSTRING;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public WMLGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	//WMLRoot:
	//	(Rtags+=WMLTag | Rmacros+=WMLMacro)*;
	public WMLRootElements getWMLRootAccess() {
		return (pWMLRoot != null) ? pWMLRoot : (pWMLRoot = new WMLRootElements());
	}
	
	public ParserRule getWMLRootRule() {
		return getWMLRootAccess().getRule();
	}

	//WMLMacro:
	//	"{" tagcontent+=ID+ "}";
	public WMLMacroElements getWMLMacroAccess() {
		return (pWMLMacro != null) ? pWMLMacro : (pWMLMacro = new WMLMacroElements());
	}
	
	public ParserRule getWMLMacroRule() {
		return getWMLMacroAccess().getRule();
	}

	//WMLTag:
	//	start=WMLStartTag (Ttags+=WMLTag | Tkeys+=WMLKey | Tmacros+=WMLMacro)* end=WMLEndTag;
	public WMLTagElements getWMLTagAccess() {
		return (pWMLTag != null) ? pWMLTag : (pWMLTag = new WMLTagElements());
	}
	
	public ParserRule getWMLTagRule() {
		return getWMLTagAccess().getRule();
	}

	//WMLStartTag:
	//	"[" tagname=ID "]";
	public WMLStartTagElements getWMLStartTagAccess() {
		return (pWMLStartTag != null) ? pWMLStartTag : (pWMLStartTag = new WMLStartTagElements());
	}
	
	public ParserRule getWMLStartTagRule() {
		return getWMLStartTagAccess().getRule();
	}

	//WMLEndTag:
	//	"[/" tagname=ID "]";
	public WMLEndTagElements getWMLEndTagAccess() {
		return (pWMLEndTag != null) ? pWMLEndTag : (pWMLEndTag = new WMLEndTagElements());
	}
	
	public ParserRule getWMLEndTagRule() {
		return getWMLEndTagAccess().getRule();
	}

	//WMLKey:
	//	keyName=ID "=" keyValue=(ID | STRING | FLOAT);
	public WMLKeyElements getWMLKeyAccess() {
		return (pWMLKey != null) ? pWMLKey : (pWMLKey = new WMLKeyElements());
	}
	
	public ParserRule getWMLKeyRule() {
		return getWMLKeyAccess().getRule();
	}

	//FLOAT returns ecore::EString hidden():
	//	INT "." INT+;
	public FLOATElements getFLOATAccess() {
		return (pFLOAT != null) ? pFLOAT : (pFLOAT = new FLOATElements());
	}
	
	public ParserRule getFLOATRule() {
		return getFLOATAccess().getRule();
	}

	//terminal SL_COMMENT:
	//	"#" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ID:
	//	("a".."z" | "A".."Z" | "_" | " " | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal IDENH:
	//	("a".."z" | "A".."Z" | "_") (" " | "a".."z" | "A".."Z" | "_" | "0".."9")* ("a".."z" | "A".."Z");
	public TerminalRule getIDENHRule() {
		return (tIDENH != null) ? tIDENH : (tIDENH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IDENH"));
	} 

	//terminal INT:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//// ---------------
	////					  import "http://www.eclipse.org/emf/2002/Ecore" as ecore
	////
	////terminal ML_COMMENT	: '/ *' -> '* /';
	////terminal SL_COMMENT 	: '//' !('\n'|'\r')* ('\r'? '\n')?;
	////
	////terminal WS			: (' '|'\t'|'\r'|'\n')+;
	////
	////terminal ANY_OTHER: .;
	//// -----------------
	////
	////Root:
	////	textdomains += TextDomain*
	//// 	preproc += Preprocessor*
	////	roots += RootType*
	////	;
	////
	////TextDomain:
	////	'#textdomain ' DomainName=ID;
	////
	////Preprocessor:
	////	Macro | PathInclude;
	////Macro:
	////	'{' macroContent += ID+'}';
	////PathInclude:
	////	'{' path = (HOMEPATH |PATH) '}';
	////	
	////RootType:
	////	'[' startTag = RootTag ']'
	////		subTypes += RootType* 
	////		at += Attributes*
	////		okpreproc += Preprocessor*
	////	'[' '/' endTag = RootTag ']';
	////
	////RootTag:
	////	SimpleTag | AddedTag; 
	////SimpleTag:
	////	(endTag?='/')?  tagName=RootTagsList;
	////AddedTag:
	////	'+' tagName = RootTagsList; 
	////
	////RootTagsList:
	////	ID; //'about'  | 'binary_path' | 'campaign' | 'textdomain' | 'units';
	////
	////Attributes:
	////	attrName=ID '=' attrValue=(TSTRING|STRING|PATH|ID|IDLIST);
	////
	////// translatable string
	////TSTRING:
	////	'_' STRING;
	////HOMEPATH:
	////	'~' PATH;
	////// ==== TERMINAL RULES ====
	////terminal SL_COMMENT: '#' !('\n'|'\r')* ('\r'? '\n')?;
	////terminal WS		: (' '|'\t'|'\r'|'\n')+;
	////// no multiline comment defined on WML, 
	////// terminal ML_COMMENT: '#' !('\n'|'\r')* ('\r'? '\n')?;
	////terminal ID  		: ('a'..'z'|'A'..'Z'|'_'|'-'|' '|'0'..'9')+;
	////terminal IDLIST	: (ID ',')* ID;
	//////terminal INT returns ecore::EInt: ('0'..'9')+;
	////terminal STRING	: 
	////			'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
	////			"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|"'") )* "'";
	////terminal ANY_OTHER: .;
	//////terminal WORD_START: ' ' | '=';
	//////terminal WORD_END	: '#' | ' ';
	////// line end
	////terminal PATH		: //('"')? 
	////					  (('a'..'z'|'A'..'Z'|'_'|'.'|'-'|'0'..'9')+ '/')*
	////					   ('a'..'z'|'A'..'Z'|'_'|'.'|'-'|'0'..'9')+ '/'? 
	////					  //('"')?
	////					  ;
	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 
}
