/*
* generated by Xtext
*/

package org.wesnoth.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class WMLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class WMLRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLRoot");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTagsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTagsWMLTagParserRuleCall_0_0 = (RuleCall)cTagsAssignment_0.eContents().get(0);
		private final Assignment cMacrosAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cMacrosWMLAbstractMacroCallParserRuleCall_1_0 = (RuleCall)cMacrosAssignment_1.eContents().get(0);
		private final Assignment cMacrosDefinesAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cMacrosDefinesWMLMacroDefineParserRuleCall_2_0 = (RuleCall)cMacrosDefinesAssignment_2.eContents().get(0);
		
		//WMLRoot:
		//	(tags+=WMLTag | macros+=WMLAbstractMacroCall | macrosDefines+=WMLMacroDefine)*;
		public ParserRule getRule() { return rule; }

		//(tags+=WMLTag | macros+=WMLAbstractMacroCall | macrosDefines+=WMLMacroDefine)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//tags+=WMLTag
		public Assignment getTagsAssignment_0() { return cTagsAssignment_0; }

		//WMLTag
		public RuleCall getTagsWMLTagParserRuleCall_0_0() { return cTagsWMLTagParserRuleCall_0_0; }

		//macros+=WMLAbstractMacroCall
		public Assignment getMacrosAssignment_1() { return cMacrosAssignment_1; }

		//WMLAbstractMacroCall
		public RuleCall getMacrosWMLAbstractMacroCallParserRuleCall_1_0() { return cMacrosWMLAbstractMacroCallParserRuleCall_1_0; }

		//macrosDefines+=WMLMacroDefine
		public Assignment getMacrosDefinesAssignment_2() { return cMacrosDefinesAssignment_2; }

		//WMLMacroDefine
		public RuleCall getMacrosDefinesWMLMacroDefineParserRuleCall_2_0() { return cMacrosDefinesWMLMacroDefineParserRuleCall_2_0; }
	}

	public class WMLTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPlusAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cPlusPlusSignKeyword_1_0 = (Keyword)cPlusAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cTagsAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cTagsWMLTagParserRuleCall_4_0_0 = (RuleCall)cTagsAssignment_4_0.eContents().get(0);
		private final Assignment cMacrosAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cMacrosWMLAbstractMacroCallParserRuleCall_4_1_0 = (RuleCall)cMacrosAssignment_4_1.eContents().get(0);
		private final Assignment cMacrosDefinesAssignment_4_2 = (Assignment)cAlternatives_4.eContents().get(2);
		private final RuleCall cMacrosDefinesWMLMacroDefineParserRuleCall_4_2_0 = (RuleCall)cMacrosDefinesAssignment_4_2.eContents().get(0);
		private final Assignment cKeysAssignment_4_3 = (Assignment)cAlternatives_4.eContents().get(3);
		private final RuleCall cKeysWMLKeyParserRuleCall_4_3_0 = (RuleCall)cKeysAssignment_4_3.eContents().get(0);
		private final Keyword cLeftSquareBracketSolidusKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cEndNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cEndNameIDTerminalRuleCall_6_0 = (RuleCall)cEndNameAssignment_6.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//WMLTag:
		//	"[" plus?="+"? name=ID "]" (tags+=WMLTag | macros+=WMLAbstractMacroCall | macrosDefines+=WMLMacroDefine |
		//	keys+=WMLKey)* "[/" endName=ID "]";
		public ParserRule getRule() { return rule; }

		//"[" plus?="+"? name=ID "]" (tags+=WMLTag | macros+=WMLAbstractMacroCall | macrosDefines+=WMLMacroDefine | keys+=WMLKey)*
		//"[/" endName=ID "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//plus?="+"?
		public Assignment getPlusAssignment_1() { return cPlusAssignment_1; }

		//"+"
		public Keyword getPlusPlusSignKeyword_1_0() { return cPlusPlusSignKeyword_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }

		//(tags+=WMLTag | macros+=WMLAbstractMacroCall | macrosDefines+=WMLMacroDefine | keys+=WMLKey)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//tags+=WMLTag
		public Assignment getTagsAssignment_4_0() { return cTagsAssignment_4_0; }

		//WMLTag
		public RuleCall getTagsWMLTagParserRuleCall_4_0_0() { return cTagsWMLTagParserRuleCall_4_0_0; }

		//macros+=WMLAbstractMacroCall
		public Assignment getMacrosAssignment_4_1() { return cMacrosAssignment_4_1; }

		//WMLAbstractMacroCall
		public RuleCall getMacrosWMLAbstractMacroCallParserRuleCall_4_1_0() { return cMacrosWMLAbstractMacroCallParserRuleCall_4_1_0; }

		//macrosDefines+=WMLMacroDefine
		public Assignment getMacrosDefinesAssignment_4_2() { return cMacrosDefinesAssignment_4_2; }

		//WMLMacroDefine
		public RuleCall getMacrosDefinesWMLMacroDefineParserRuleCall_4_2_0() { return cMacrosDefinesWMLMacroDefineParserRuleCall_4_2_0; }

		//keys+=WMLKey
		public Assignment getKeysAssignment_4_3() { return cKeysAssignment_4_3; }

		//WMLKey
		public RuleCall getKeysWMLKeyParserRuleCall_4_3_0() { return cKeysWMLKeyParserRuleCall_4_3_0; }

		//"[/"
		public Keyword getLeftSquareBracketSolidusKeyword_5() { return cLeftSquareBracketSolidusKeyword_5; }

		//endName=ID
		public Assignment getEndNameAssignment_6() { return cEndNameAssignment_6; }

		//ID
		public RuleCall getEndNameIDTerminalRuleCall_6_0() { return cEndNameIDTerminalRuleCall_6_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }
	}

	public class WMLAbstractMacroCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLAbstractMacroCall");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWMLMacroIncludeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWMLMacroCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//WMLAbstractMacroCall:
		//	WMLMacroInclude | WMLMacroCall;
		public ParserRule getRule() { return rule; }

		//WMLMacroInclude | WMLMacroCall
		public Alternatives getAlternatives() { return cAlternatives; }

		//WMLMacroInclude
		public RuleCall getWMLMacroIncludeParserRuleCall_0() { return cWMLMacroIncludeParserRuleCall_0; }

		//WMLMacroCall
		public RuleCall getWMLMacroCallParserRuleCall_1() { return cWMLMacroCallParserRuleCall_1; }
	}

	public class WMLMacroIncludeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLMacroInclude");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameWMLPathParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//WMLMacroInclude:
		//	"{" name=WMLPath "}";
		public ParserRule getRule() { return rule; }

		//"{" name=WMLPath "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//name=WMLPath
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//WMLPath
		public RuleCall getNameWMLPathParserRuleCall_1_0() { return cNameWMLPathParserRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class WMLMacroCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLMacroCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cArgsAlternatives_2_0 = (Alternatives)cArgsAssignment_2.eContents().get(0);
		private final RuleCall cArgsIDTerminalRuleCall_2_0_0 = (RuleCall)cArgsAlternatives_2_0.eContents().get(0);
		private final RuleCall cArgsSTRINGTerminalRuleCall_2_0_1 = (RuleCall)cArgsAlternatives_2_0.eContents().get(1);
		private final RuleCall cArgsTSTRINGParserRuleCall_2_0_2 = (RuleCall)cArgsAlternatives_2_0.eContents().get(2);
		private final RuleCall cArgsANY_OTHERTerminalRuleCall_2_0_3 = (RuleCall)cArgsAlternatives_2_0.eContents().get(3);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cParamsWMLMacroCallParameterParserRuleCall_3_0_0 = (RuleCall)cParamsAssignment_3_0.eContents().get(0);
		private final Assignment cTagsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cTagsWMLTagParserRuleCall_3_1_0 = (RuleCall)cTagsAssignment_3_1.eContents().get(0);
		private final Assignment cMacrosAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cMacrosWMLMacroCallParserRuleCall_3_2_0 = (RuleCall)cMacrosAssignment_3_2.eContents().get(0);
		private final Assignment cMacrosDefinesAssignment_3_3 = (Assignment)cAlternatives_3.eContents().get(3);
		private final RuleCall cMacrosDefinesWMLMacroDefineParserRuleCall_3_3_0 = (RuleCall)cMacrosDefinesAssignment_3_3.eContents().get(0);
		private final Assignment cKeysAssignment_3_4 = (Assignment)cAlternatives_3.eContents().get(4);
		private final RuleCall cKeysWMLKeyParserRuleCall_3_4_0 = (RuleCall)cKeysAssignment_3_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//WMLMacroCall:
		//	"{" name=ID args+=(ID | STRING | TSTRING | ANY_OTHER)* (params+=WMLMacroCallParameter | tags+=WMLTag |
		//	macros+=WMLMacroCall | macrosDefines+=WMLMacroDefine | keys+=WMLKey)* "}";
		public ParserRule getRule() { return rule; }

		//"{" name=ID args+=(ID | STRING | TSTRING | ANY_OTHER)* (params+=WMLMacroCallParameter | tags+=WMLTag |
		//macros+=WMLMacroCall | macrosDefines+=WMLMacroDefine | keys+=WMLKey)* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//args+=(ID | STRING | TSTRING | ANY_OTHER)*
		public Assignment getArgsAssignment_2() { return cArgsAssignment_2; }

		//ID | STRING | TSTRING | ANY_OTHER
		public Alternatives getArgsAlternatives_2_0() { return cArgsAlternatives_2_0; }

		//ID
		public RuleCall getArgsIDTerminalRuleCall_2_0_0() { return cArgsIDTerminalRuleCall_2_0_0; }

		//STRING
		public RuleCall getArgsSTRINGTerminalRuleCall_2_0_1() { return cArgsSTRINGTerminalRuleCall_2_0_1; }

		//TSTRING
		public RuleCall getArgsTSTRINGParserRuleCall_2_0_2() { return cArgsTSTRINGParserRuleCall_2_0_2; }

		//ANY_OTHER
		public RuleCall getArgsANY_OTHERTerminalRuleCall_2_0_3() { return cArgsANY_OTHERTerminalRuleCall_2_0_3; }

		//(params+=WMLMacroCallParameter | tags+=WMLTag | macros+=WMLMacroCall | macrosDefines+=WMLMacroDefine | keys+=WMLKey)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//params+=WMLMacroCallParameter
		public Assignment getParamsAssignment_3_0() { return cParamsAssignment_3_0; }

		//WMLMacroCallParameter
		public RuleCall getParamsWMLMacroCallParameterParserRuleCall_3_0_0() { return cParamsWMLMacroCallParameterParserRuleCall_3_0_0; }

		//tags+=WMLTag
		public Assignment getTagsAssignment_3_1() { return cTagsAssignment_3_1; }

		//WMLTag
		public RuleCall getTagsWMLTagParserRuleCall_3_1_0() { return cTagsWMLTagParserRuleCall_3_1_0; }

		//macros+=WMLMacroCall
		public Assignment getMacrosAssignment_3_2() { return cMacrosAssignment_3_2; }

		//WMLMacroCall
		public RuleCall getMacrosWMLMacroCallParserRuleCall_3_2_0() { return cMacrosWMLMacroCallParserRuleCall_3_2_0; }

		//macrosDefines+=WMLMacroDefine
		public Assignment getMacrosDefinesAssignment_3_3() { return cMacrosDefinesAssignment_3_3; }

		//WMLMacroDefine
		public RuleCall getMacrosDefinesWMLMacroDefineParserRuleCall_3_3_0() { return cMacrosDefinesWMLMacroDefineParserRuleCall_3_3_0; }

		//keys+=WMLKey
		public Assignment getKeysAssignment_3_4() { return cKeysAssignment_3_4; }

		//WMLKey
		public RuleCall getKeysWMLKeyParserRuleCall_3_4_0() { return cKeysWMLKeyParserRuleCall_3_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class WMLMacroDefineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLMacroDefine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDEFINETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cParamsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cParamsWMLMacroCallParameterParserRuleCall_1_0_0 = (RuleCall)cParamsAssignment_1_0.eContents().get(0);
		private final Assignment cTagsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cTagsWMLTagParserRuleCall_1_1_0 = (RuleCall)cTagsAssignment_1_1.eContents().get(0);
		private final Assignment cMacrosAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cMacrosWMLMacroCallParserRuleCall_1_2_0 = (RuleCall)cMacrosAssignment_1_2.eContents().get(0);
		private final Assignment cMacrosDefinesAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cMacrosDefinesWMLMacroDefineParserRuleCall_1_3_0 = (RuleCall)cMacrosDefinesAssignment_1_3.eContents().get(0);
		private final Assignment cKeysAssignment_1_4 = (Assignment)cAlternatives_1.eContents().get(4);
		private final RuleCall cKeysWMLKeyParserRuleCall_1_4_0 = (RuleCall)cKeysAssignment_1_4.eContents().get(0);
		private final RuleCall cENDDEFINETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//WMLMacroDefine:
		//	DEFINE (params+=WMLMacroCallParameter | tags+=WMLTag | macros+=WMLMacroCall | macrosDefines+=WMLMacroDefine |
		//	keys+=WMLKey)* ENDDEFINE;
		public ParserRule getRule() { return rule; }

		//DEFINE (params+=WMLMacroCallParameter | tags+=WMLTag | macros+=WMLMacroCall | macrosDefines+=WMLMacroDefine |
		//keys+=WMLKey)* ENDDEFINE
		public Group getGroup() { return cGroup; }

		//DEFINE
		public RuleCall getDEFINETerminalRuleCall_0() { return cDEFINETerminalRuleCall_0; }

		//(params+=WMLMacroCallParameter | tags+=WMLTag | macros+=WMLMacroCall | macrosDefines+=WMLMacroDefine | keys+=WMLKey)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//params+=WMLMacroCallParameter
		public Assignment getParamsAssignment_1_0() { return cParamsAssignment_1_0; }

		//WMLMacroCallParameter
		public RuleCall getParamsWMLMacroCallParameterParserRuleCall_1_0_0() { return cParamsWMLMacroCallParameterParserRuleCall_1_0_0; }

		//tags+=WMLTag
		public Assignment getTagsAssignment_1_1() { return cTagsAssignment_1_1; }

		//WMLTag
		public RuleCall getTagsWMLTagParserRuleCall_1_1_0() { return cTagsWMLTagParserRuleCall_1_1_0; }

		//macros+=WMLMacroCall
		public Assignment getMacrosAssignment_1_2() { return cMacrosAssignment_1_2; }

		//WMLMacroCall
		public RuleCall getMacrosWMLMacroCallParserRuleCall_1_2_0() { return cMacrosWMLMacroCallParserRuleCall_1_2_0; }

		//macrosDefines+=WMLMacroDefine
		public Assignment getMacrosDefinesAssignment_1_3() { return cMacrosDefinesAssignment_1_3; }

		//WMLMacroDefine
		public RuleCall getMacrosDefinesWMLMacroDefineParserRuleCall_1_3_0() { return cMacrosDefinesWMLMacroDefineParserRuleCall_1_3_0; }

		//keys+=WMLKey
		public Assignment getKeysAssignment_1_4() { return cKeysAssignment_1_4; }

		//WMLKey
		public RuleCall getKeysWMLKeyParserRuleCall_1_4_0() { return cKeysWMLKeyParserRuleCall_1_4_0; }

		//ENDDEFINE
		public RuleCall getENDDEFINETerminalRuleCall_2() { return cENDDEFINETerminalRuleCall_2; }
	}

	public class WMLTextdomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLTextdomain");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameTEXTDOMAINTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//WMLTextdomain:
		//	name=TEXTDOMAIN;
		public ParserRule getRule() { return rule; }

		//name=TEXTDOMAIN
		public Assignment getNameAssignment() { return cNameAssignment; }

		//TEXTDOMAIN
		public RuleCall getNameTEXTDOMAINTerminalRuleCall_0() { return cNameTEXTDOMAINTerminalRuleCall_0; }
	}

	public class WMLKeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLKey");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameWMLIDListParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueWMLKeyValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cPlusSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExtraArgsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExtraArgsWMLKeyExtraArgsParserRuleCall_3_1_0 = (RuleCall)cExtraArgsAssignment_3_1.eContents().get(0);
		
		//WMLKey:
		//	name=WMLIDList "=" value=WMLKeyValue ("+" extraArgs+=WMLKeyExtraArgs)*;
		public ParserRule getRule() { return rule; }

		//name=WMLIDList "=" value=WMLKeyValue ("+" extraArgs+=WMLKeyExtraArgs)*
		public Group getGroup() { return cGroup; }

		//name=WMLIDList
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//WMLIDList
		public RuleCall getNameWMLIDListParserRuleCall_0_0() { return cNameWMLIDListParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=WMLKeyValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//WMLKeyValue
		public RuleCall getValueWMLKeyValueParserRuleCall_2_0() { return cValueWMLKeyValueParserRuleCall_2_0; }

		//("+" extraArgs+=WMLKeyExtraArgs)*
		public Group getGroup_3() { return cGroup_3; }

		//"+"
		public Keyword getPlusSignKeyword_3_0() { return cPlusSignKeyword_3_0; }

		//extraArgs+=WMLKeyExtraArgs
		public Assignment getExtraArgsAssignment_3_1() { return cExtraArgsAssignment_3_1; }

		//WMLKeyExtraArgs
		public RuleCall getExtraArgsWMLKeyExtraArgsParserRuleCall_3_1_0() { return cExtraArgsWMLKeyExtraArgsParserRuleCall_3_1_0; }
	}

	public class WMLKeyExtraArgsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLKeyExtraArgs");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWMLMacroCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTSTRINGParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//WMLKeyExtraArgs:
		//	WMLMacroCall | STRING | TSTRING;
		public ParserRule getRule() { return rule; }

		//WMLMacroCall | STRING | TSTRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//WMLMacroCall
		public RuleCall getWMLMacroCallParserRuleCall_0() { return cWMLMacroCallParserRuleCall_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }

		//TSTRING
		public RuleCall getTSTRINGParserRuleCall_2() { return cTSTRINGParserRuleCall_2; }
	}

	public class WMLMacroCallParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLMacroCallParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cTSTRINGParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		private final RuleCall cFILEParserRuleCall_1_3 = (RuleCall)cAlternatives_1.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//WMLMacroCallParameter returns ecore::EString:
		//	"(" (ID | STRING | TSTRING | FILE) ")";
		public ParserRule getRule() { return rule; }

		//"(" (ID | STRING | TSTRING | FILE) ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//ID | STRING | TSTRING | FILE
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_1() { return cSTRINGTerminalRuleCall_1_1; }

		//TSTRING
		public RuleCall getTSTRINGParserRuleCall_1_2() { return cTSTRINGParserRuleCall_1_2; }

		//FILE
		public RuleCall getFILEParserRuleCall_1_3() { return cFILEParserRuleCall_1_3; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class WMLKeyValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLKeyValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWMLINTListParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWMLIDListParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWMLMacroCallParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSTRINGTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTSTRINGParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cWMLPathParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cFILEParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//WMLKeyValue:
		//	WMLINTList | WMLIDList | WMLMacroCall | STRING | TSTRING | WMLPath | FILE;
		public ParserRule getRule() { return rule; }

		//WMLINTList | WMLIDList | WMLMacroCall | STRING | TSTRING | WMLPath | FILE
		public Alternatives getAlternatives() { return cAlternatives; }

		//WMLINTList
		public RuleCall getWMLINTListParserRuleCall_0() { return cWMLINTListParserRuleCall_0; }

		//WMLIDList
		public RuleCall getWMLIDListParserRuleCall_1() { return cWMLIDListParserRuleCall_1; }

		//WMLMacroCall
		public RuleCall getWMLMacroCallParserRuleCall_2() { return cWMLMacroCallParserRuleCall_2; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_3() { return cSTRINGTerminalRuleCall_3; }

		//TSTRING
		public RuleCall getTSTRINGParserRuleCall_4() { return cTSTRINGParserRuleCall_4; }

		//WMLPath
		public RuleCall getWMLPathParserRuleCall_5() { return cWMLPathParserRuleCall_5; }

		//FILE
		public RuleCall getFILEParserRuleCall_6() { return cFILEParserRuleCall_6; }
	}

	public class WMLPathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLPath");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTildeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cPATH_IDParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSolidusKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cPATH_IDParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cFILEParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cSolidusKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//WMLPath returns ecore::EString:
		//	"~"? PATH_ID ("/" PATH_ID)+ FILE? "/"?;
		public ParserRule getRule() { return rule; }

		//"~"? PATH_ID ("/" PATH_ID)+ FILE? "/"?
		public Group getGroup() { return cGroup; }

		//"~"?
		public Keyword getTildeKeyword_0() { return cTildeKeyword_0; }

		//PATH_ID
		public RuleCall getPATH_IDParserRuleCall_1() { return cPATH_IDParserRuleCall_1; }

		//("/" PATH_ID)+
		public Group getGroup_2() { return cGroup_2; }

		//"/"
		public Keyword getSolidusKeyword_2_0() { return cSolidusKeyword_2_0; }

		//PATH_ID
		public RuleCall getPATH_IDParserRuleCall_2_1() { return cPATH_IDParserRuleCall_2_1; }

		//FILE?
		public RuleCall getFILEParserRuleCall_3() { return cFILEParserRuleCall_3; }

		//"/"?
		public Keyword getSolidusKeyword_4() { return cSolidusKeyword_4; }
	}

	public class WMLIDListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLIDList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//WMLIDList returns ecore::EString:
		//	ID ("," ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("," ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("," ID)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class WMLINTListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLINTList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//WMLINTList returns ecore::EString:
		//	INT ("," INT)*;
		public ParserRule getRule() { return rule; }

		//INT ("," INT)*
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//("," INT)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}

	public class TSTRINGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TSTRING");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c_Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//TSTRING returns ecore::EString:
		//	"_" STRING;
		public ParserRule getRule() { return rule; }

		//"_" STRING
		public Group getGroup() { return cGroup; }

		//"_"
		public Keyword get_Keyword_0() { return c_Keyword_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}

	public class FILEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FILE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPATH_IDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//FILE returns ecore::EString:
		//	PATH_ID+ "." ID;
		public ParserRule getRule() { return rule; }

		//PATH_ID+ "." ID
		public Group getGroup() { return cGroup; }

		//PATH_ID+
		public RuleCall getPATH_IDParserRuleCall_0() { return cPATH_IDParserRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
	}

	public class PATH_IDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PATH_ID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//PATH_ID returns ecore::EString:
		//	ID | "-";
		public ParserRule getRule() { return rule; }

		//ID | "-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}
	
	
	private WMLRootElements pWMLRoot;
	private WMLTagElements pWMLTag;
	private WMLAbstractMacroCallElements pWMLAbstractMacroCall;
	private WMLMacroIncludeElements pWMLMacroInclude;
	private WMLMacroCallElements pWMLMacroCall;
	private WMLMacroDefineElements pWMLMacroDefine;
	private WMLTextdomainElements pWMLTextdomain;
	private WMLKeyElements pWMLKey;
	private WMLKeyExtraArgsElements pWMLKeyExtraArgs;
	private WMLMacroCallParameterElements pWMLMacroCallParameter;
	private WMLKeyValueElements pWMLKeyValue;
	private WMLPathElements pWMLPath;
	private WMLIDListElements pWMLIDList;
	private WMLINTListElements pWMLINTList;
	private TSTRINGElements pTSTRING;
	private FILEElements pFILE;
	private PATH_IDElements pPATH_ID;
	private TerminalRule tID;
	private TerminalRule tINT;
	private TerminalRule tSTRING;
	private TerminalRule tTEXTDOMAIN;
	private TerminalRule tDEFINE;
	private TerminalRule tENDDEFINE;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tANY_OTHER;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public WMLGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	//WMLRoot:
	//	(tags+=WMLTag | macros+=WMLAbstractMacroCall | macrosDefines+=WMLMacroDefine)*;
	public WMLRootElements getWMLRootAccess() {
		return (pWMLRoot != null) ? pWMLRoot : (pWMLRoot = new WMLRootElements());
	}
	
	public ParserRule getWMLRootRule() {
		return getWMLRootAccess().getRule();
	}

	//WMLTag:
	//	"[" plus?="+"? name=ID "]" (tags+=WMLTag | macros+=WMLAbstractMacroCall | macrosDefines+=WMLMacroDefine |
	//	keys+=WMLKey)* "[/" endName=ID "]";
	public WMLTagElements getWMLTagAccess() {
		return (pWMLTag != null) ? pWMLTag : (pWMLTag = new WMLTagElements());
	}
	
	public ParserRule getWMLTagRule() {
		return getWMLTagAccess().getRule();
	}

	//WMLAbstractMacroCall:
	//	WMLMacroInclude | WMLMacroCall;
	public WMLAbstractMacroCallElements getWMLAbstractMacroCallAccess() {
		return (pWMLAbstractMacroCall != null) ? pWMLAbstractMacroCall : (pWMLAbstractMacroCall = new WMLAbstractMacroCallElements());
	}
	
	public ParserRule getWMLAbstractMacroCallRule() {
		return getWMLAbstractMacroCallAccess().getRule();
	}

	//WMLMacroInclude:
	//	"{" name=WMLPath "}";
	public WMLMacroIncludeElements getWMLMacroIncludeAccess() {
		return (pWMLMacroInclude != null) ? pWMLMacroInclude : (pWMLMacroInclude = new WMLMacroIncludeElements());
	}
	
	public ParserRule getWMLMacroIncludeRule() {
		return getWMLMacroIncludeAccess().getRule();
	}

	//WMLMacroCall:
	//	"{" name=ID args+=(ID | STRING | TSTRING | ANY_OTHER)* (params+=WMLMacroCallParameter | tags+=WMLTag |
	//	macros+=WMLMacroCall | macrosDefines+=WMLMacroDefine | keys+=WMLKey)* "}";
	public WMLMacroCallElements getWMLMacroCallAccess() {
		return (pWMLMacroCall != null) ? pWMLMacroCall : (pWMLMacroCall = new WMLMacroCallElements());
	}
	
	public ParserRule getWMLMacroCallRule() {
		return getWMLMacroCallAccess().getRule();
	}

	//WMLMacroDefine:
	//	DEFINE (params+=WMLMacroCallParameter | tags+=WMLTag | macros+=WMLMacroCall | macrosDefines+=WMLMacroDefine |
	//	keys+=WMLKey)* ENDDEFINE;
	public WMLMacroDefineElements getWMLMacroDefineAccess() {
		return (pWMLMacroDefine != null) ? pWMLMacroDefine : (pWMLMacroDefine = new WMLMacroDefineElements());
	}
	
	public ParserRule getWMLMacroDefineRule() {
		return getWMLMacroDefineAccess().getRule();
	}

	//WMLTextdomain:
	//	name=TEXTDOMAIN;
	public WMLTextdomainElements getWMLTextdomainAccess() {
		return (pWMLTextdomain != null) ? pWMLTextdomain : (pWMLTextdomain = new WMLTextdomainElements());
	}
	
	public ParserRule getWMLTextdomainRule() {
		return getWMLTextdomainAccess().getRule();
	}

	//WMLKey:
	//	name=WMLIDList "=" value=WMLKeyValue ("+" extraArgs+=WMLKeyExtraArgs)*;
	public WMLKeyElements getWMLKeyAccess() {
		return (pWMLKey != null) ? pWMLKey : (pWMLKey = new WMLKeyElements());
	}
	
	public ParserRule getWMLKeyRule() {
		return getWMLKeyAccess().getRule();
	}

	//WMLKeyExtraArgs:
	//	WMLMacroCall | STRING | TSTRING;
	public WMLKeyExtraArgsElements getWMLKeyExtraArgsAccess() {
		return (pWMLKeyExtraArgs != null) ? pWMLKeyExtraArgs : (pWMLKeyExtraArgs = new WMLKeyExtraArgsElements());
	}
	
	public ParserRule getWMLKeyExtraArgsRule() {
		return getWMLKeyExtraArgsAccess().getRule();
	}

	//WMLMacroCallParameter returns ecore::EString:
	//	"(" (ID | STRING | TSTRING | FILE) ")";
	public WMLMacroCallParameterElements getWMLMacroCallParameterAccess() {
		return (pWMLMacroCallParameter != null) ? pWMLMacroCallParameter : (pWMLMacroCallParameter = new WMLMacroCallParameterElements());
	}
	
	public ParserRule getWMLMacroCallParameterRule() {
		return getWMLMacroCallParameterAccess().getRule();
	}

	//WMLKeyValue:
	//	WMLINTList | WMLIDList | WMLMacroCall | STRING | TSTRING | WMLPath | FILE;
	public WMLKeyValueElements getWMLKeyValueAccess() {
		return (pWMLKeyValue != null) ? pWMLKeyValue : (pWMLKeyValue = new WMLKeyValueElements());
	}
	
	public ParserRule getWMLKeyValueRule() {
		return getWMLKeyValueAccess().getRule();
	}

	//WMLPath returns ecore::EString:
	//	"~"? PATH_ID ("/" PATH_ID)+ FILE? "/"?;
	public WMLPathElements getWMLPathAccess() {
		return (pWMLPath != null) ? pWMLPath : (pWMLPath = new WMLPathElements());
	}
	
	public ParserRule getWMLPathRule() {
		return getWMLPathAccess().getRule();
	}

	//WMLIDList returns ecore::EString:
	//	ID ("," ID)*;
	public WMLIDListElements getWMLIDListAccess() {
		return (pWMLIDList != null) ? pWMLIDList : (pWMLIDList = new WMLIDListElements());
	}
	
	public ParserRule getWMLIDListRule() {
		return getWMLIDListAccess().getRule();
	}

	//WMLINTList returns ecore::EString:
	//	INT ("," INT)*;
	public WMLINTListElements getWMLINTListAccess() {
		return (pWMLINTList != null) ? pWMLINTList : (pWMLINTList = new WMLINTListElements());
	}
	
	public ParserRule getWMLINTListRule() {
		return getWMLINTListAccess().getRule();
	}

	//TSTRING returns ecore::EString:
	//	"_" STRING;
	public TSTRINGElements getTSTRINGAccess() {
		return (pTSTRING != null) ? pTSTRING : (pTSTRING = new TSTRINGElements());
	}
	
	public ParserRule getTSTRINGRule() {
		return getTSTRINGAccess().getRule();
	}

	//FILE returns ecore::EString:
	//	PATH_ID+ "." ID;
	public FILEElements getFILEAccess() {
		return (pFILE != null) ? pFILE : (pFILE = new FILEElements());
	}
	
	public ParserRule getFILERule() {
		return getFILEAccess().getRule();
	}

	//PATH_ID returns ecore::EString:
	//	ID | "-";
	public PATH_IDElements getPATH_IDAccess() {
		return (pPATH_ID != null) ? pPATH_ID : (pPATH_ID = new PATH_IDElements());
	}
	
	public ParserRule getPATH_IDRule() {
		return getPATH_IDAccess().getRule();
	}

	//terminal ID:
	//	("a".."z" | "A".."Z" | "_" | "0".."9")+;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal INT returns ecore::EBigDecimal:
	//	"0".."9"* ("." "0".."9"+)?;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal TEXTDOMAIN:
	//	"#textdomain" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getTEXTDOMAINRule() {
		return (tTEXTDOMAIN != null) ? tTEXTDOMAIN : (tTEXTDOMAIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TEXTDOMAIN"));
	} 

	//terminal DEFINE:
	//	"#define" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getDEFINERule() {
		return (tDEFINE != null) ? tDEFINE : (tDEFINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DEFINE"));
	} 

	//terminal ENDDEFINE:
	//	"#enddef" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getENDDEFINERule() {
		return (tENDDEFINE != null) ? tENDDEFINE : (tENDDEFINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ENDDEFINE"));
	} 

	//terminal SL_COMMENT:
	//	"#" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
