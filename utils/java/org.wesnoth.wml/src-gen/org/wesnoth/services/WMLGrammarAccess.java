/*
* generated by Xtext
*/

package org.wesnoth.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class WMLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class WMLRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLRoot");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTagsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTagsWMLTagParserRuleCall_0_0 = (RuleCall)cTagsAssignment_0.eContents().get(0);
		private final Assignment cMacroCallsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cMacroCallsWMLAbstractMacroCallParserRuleCall_1_0 = (RuleCall)cMacroCallsAssignment_1.eContents().get(0);
		
		//WMLRoot:
		//	(tags+=WMLTag | macroCalls+=WMLAbstractMacroCall)*;
		public ParserRule getRule() { return rule; }

		//(tags+=WMLTag | macroCalls+=WMLAbstractMacroCall)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//tags+=WMLTag
		public Assignment getTagsAssignment_0() { return cTagsAssignment_0; }

		//WMLTag
		public RuleCall getTagsWMLTagParserRuleCall_0_0() { return cTagsWMLTagParserRuleCall_0_0; }

		//macroCalls+=WMLAbstractMacroCall
		public Assignment getMacroCallsAssignment_1() { return cMacroCallsAssignment_1; }

		//WMLAbstractMacroCall
		public RuleCall getMacroCallsWMLAbstractMacroCallParserRuleCall_1_0() { return cMacroCallsWMLAbstractMacroCallParserRuleCall_1_0; }
	}

	public class WMLTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPlusAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cPlusPlusSignKeyword_1_0 = (Keyword)cPlusAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cTagsAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cTagsWMLTagParserRuleCall_4_0_0 = (RuleCall)cTagsAssignment_4_0.eContents().get(0);
		private final Assignment cKeysAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cKeysWMLKeyParserRuleCall_4_1_0 = (RuleCall)cKeysAssignment_4_1.eContents().get(0);
		private final Assignment cMacroCallsAssignment_4_2 = (Assignment)cAlternatives_4.eContents().get(2);
		private final RuleCall cMacroCallsWMLAbstractMacroCallParserRuleCall_4_2_0 = (RuleCall)cMacroCallsAssignment_4_2.eContents().get(0);
		private final Keyword cLeftSquareBracketSolidusKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cEndNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cEndNameIDTerminalRuleCall_6_0 = (RuleCall)cEndNameAssignment_6.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//WMLTag:
		//	"[" plus?="+"? name=ID "]" (tags+=WMLTag | keys+=WMLKey | macroCalls+=WMLAbstractMacroCall)* "[/" endName=ID "]";
		public ParserRule getRule() { return rule; }

		//"[" plus?="+"? name=ID "]" (tags+=WMLTag | keys+=WMLKey | macroCalls+=WMLAbstractMacroCall)* "[/" endName=ID "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//plus?="+"?
		public Assignment getPlusAssignment_1() { return cPlusAssignment_1; }

		//"+"
		public Keyword getPlusPlusSignKeyword_1_0() { return cPlusPlusSignKeyword_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }

		//(tags+=WMLTag | keys+=WMLKey | macroCalls+=WMLAbstractMacroCall)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//tags+=WMLTag
		public Assignment getTagsAssignment_4_0() { return cTagsAssignment_4_0; }

		//WMLTag
		public RuleCall getTagsWMLTagParserRuleCall_4_0_0() { return cTagsWMLTagParserRuleCall_4_0_0; }

		//keys+=WMLKey
		public Assignment getKeysAssignment_4_1() { return cKeysAssignment_4_1; }

		//WMLKey
		public RuleCall getKeysWMLKeyParserRuleCall_4_1_0() { return cKeysWMLKeyParserRuleCall_4_1_0; }

		//macroCalls+=WMLAbstractMacroCall
		public Assignment getMacroCallsAssignment_4_2() { return cMacroCallsAssignment_4_2; }

		//WMLAbstractMacroCall
		public RuleCall getMacroCallsWMLAbstractMacroCallParserRuleCall_4_2_0() { return cMacroCallsWMLAbstractMacroCallParserRuleCall_4_2_0; }

		//"[/"
		public Keyword getLeftSquareBracketSolidusKeyword_5() { return cLeftSquareBracketSolidusKeyword_5; }

		//endName=ID
		public Assignment getEndNameAssignment_6() { return cEndNameAssignment_6; }

		//ID
		public RuleCall getEndNameIDTerminalRuleCall_6_0() { return cEndNameIDTerminalRuleCall_6_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }
	}

	public class WMLKeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLKey");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueWMLAbstractKeyValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cPlusSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExtraArgsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExtraArgsWMLAbstractKeyValueParserRuleCall_3_1_0 = (RuleCall)cExtraArgsAssignment_3_1.eContents().get(0);
		
		//WMLKey:
		//	name=ID "=" value=WMLAbstractKeyValue ("+" extraArgs+=WMLAbstractKeyValue)*;
		public ParserRule getRule() { return rule; }

		//name=ID "=" value=WMLAbstractKeyValue ("+" extraArgs+=WMLAbstractKeyValue)*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=WMLAbstractKeyValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//WMLAbstractKeyValue
		public RuleCall getValueWMLAbstractKeyValueParserRuleCall_2_0() { return cValueWMLAbstractKeyValueParserRuleCall_2_0; }

		//("+" extraArgs+=WMLAbstractKeyValue)*
		public Group getGroup_3() { return cGroup_3; }

		//"+"
		public Keyword getPlusSignKeyword_3_0() { return cPlusSignKeyword_3_0; }

		//extraArgs+=WMLAbstractKeyValue
		public Assignment getExtraArgsAssignment_3_1() { return cExtraArgsAssignment_3_1; }

		//WMLAbstractKeyValue
		public RuleCall getExtraArgsWMLAbstractKeyValueParserRuleCall_3_1_0() { return cExtraArgsWMLAbstractKeyValueParserRuleCall_3_1_0; }
	}

	public class WMLAbstractMacroCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLAbstractMacroCall");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWMLMacroIncludeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWMLMacroCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//WMLAbstractMacroCall:
		//	WMLMacroInclude | WMLMacroCall;
		public ParserRule getRule() { return rule; }

		//WMLMacroInclude | WMLMacroCall
		public Alternatives getAlternatives() { return cAlternatives; }

		//WMLMacroInclude
		public RuleCall getWMLMacroIncludeParserRuleCall_0() { return cWMLMacroIncludeParserRuleCall_0; }

		//WMLMacroCall
		public RuleCall getWMLMacroCallParserRuleCall_1() { return cWMLMacroCallParserRuleCall_1; }
	}

	public class WMLMacroIncludeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLMacroInclude");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTildeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPathAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPathWMLKeyValueParserRuleCall_2_0 = (RuleCall)cPathAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//WMLMacroInclude:
		//	"{" "~" path=WMLKeyValue "}";
		public ParserRule getRule() { return rule; }

		//"{" "~" path=WMLKeyValue "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//"~"
		public Keyword getTildeKeyword_1() { return cTildeKeyword_1; }

		//path=WMLKeyValue
		public Assignment getPathAssignment_2() { return cPathAssignment_2; }

		//WMLKeyValue
		public RuleCall getPathWMLKeyValueParserRuleCall_2_0() { return cPathWMLKeyValueParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class WMLMacroCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLMacroCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cParamsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamsWMLAbstractKeyValueParserRuleCall_2_0 = (RuleCall)cParamsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//WMLMacroCall:
		//	"{" name=ID params+=WMLAbstractKeyValue? "}";
		public ParserRule getRule() { return rule; }

		//"{" name=ID params+=WMLAbstractKeyValue? "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//params+=WMLAbstractKeyValue?
		public Assignment getParamsAssignment_2() { return cParamsAssignment_2; }

		//WMLAbstractKeyValue
		public RuleCall getParamsWMLAbstractKeyValueParserRuleCall_2_0() { return cParamsWMLAbstractKeyValueParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class WMLAbstractKeyValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLAbstractKeyValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWMLKeyValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWMLMacroCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//WMLAbstractKeyValue:
		//	WMLKeyValue | WMLMacroCall;
		public ParserRule getRule() { return rule; }

		//WMLKeyValue | WMLMacroCall
		public Alternatives getAlternatives() { return cAlternatives; }

		//WMLKeyValue
		public RuleCall getWMLKeyValueParserRuleCall_0() { return cWMLKeyValueParserRuleCall_0; }

		//WMLMacroCall
		public RuleCall getWMLMacroCallParserRuleCall_1() { return cWMLMacroCallParserRuleCall_1; }
	}

	public class WMLKeyValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLKeyValue");
		private final RuleCall cWMLANYVALUEParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//WMLKeyValue returns ecore::EString:
		//	WMLANYVALUE+;
		public ParserRule getRule() { return rule; }

		//WMLANYVALUE+
		public RuleCall getWMLANYVALUEParserRuleCall() { return cWMLANYVALUEParserRuleCall; }
	}

	public class WMLANYVALUEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLANYVALUE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTSTRINGParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cANY_OTHERTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//WMLANYVALUE returns ecore::EString:
		//	ID | INT | STRING | TSTRING | ANY_OTHER;
		public ParserRule getRule() { return rule; }

		//ID | INT | STRING | TSTRING | ANY_OTHER
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }

		//TSTRING
		public RuleCall getTSTRINGParserRuleCall_3() { return cTSTRINGParserRuleCall_3; }

		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_4() { return cANY_OTHERTerminalRuleCall_4; }
	}

	public class TSTRINGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TSTRING");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c_Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//TSTRING returns ecore::EString:
		//	"_" STRING;
		public ParserRule getRule() { return rule; }

		//"_" STRING
		public Group getGroup() { return cGroup; }

		//"_"
		public Keyword get_Keyword_0() { return c_Keyword_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}
	
	
	private WMLRootElements pWMLRoot;
	private WMLTagElements pWMLTag;
	private WMLKeyElements pWMLKey;
	private WMLAbstractMacroCallElements pWMLAbstractMacroCall;
	private WMLMacroIncludeElements pWMLMacroInclude;
	private WMLMacroCallElements pWMLMacroCall;
	private WMLAbstractKeyValueElements pWMLAbstractKeyValue;
	private WMLKeyValueElements pWMLKeyValue;
	private WMLANYVALUEElements pWMLANYVALUE;
	private TSTRINGElements pTSTRING;
	private TerminalRule tID;
	private TerminalRule tINT;
	private TerminalRule tSTRING;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tEOL;
	private TerminalRule tANY_OTHER;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public WMLGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	//WMLRoot:
	//	(tags+=WMLTag | macroCalls+=WMLAbstractMacroCall)*;
	public WMLRootElements getWMLRootAccess() {
		return (pWMLRoot != null) ? pWMLRoot : (pWMLRoot = new WMLRootElements());
	}
	
	public ParserRule getWMLRootRule() {
		return getWMLRootAccess().getRule();
	}

	//WMLTag:
	//	"[" plus?="+"? name=ID "]" (tags+=WMLTag | keys+=WMLKey | macroCalls+=WMLAbstractMacroCall)* "[/" endName=ID "]";
	public WMLTagElements getWMLTagAccess() {
		return (pWMLTag != null) ? pWMLTag : (pWMLTag = new WMLTagElements());
	}
	
	public ParserRule getWMLTagRule() {
		return getWMLTagAccess().getRule();
	}

	//WMLKey:
	//	name=ID "=" value=WMLAbstractKeyValue ("+" extraArgs+=WMLAbstractKeyValue)*;
	public WMLKeyElements getWMLKeyAccess() {
		return (pWMLKey != null) ? pWMLKey : (pWMLKey = new WMLKeyElements());
	}
	
	public ParserRule getWMLKeyRule() {
		return getWMLKeyAccess().getRule();
	}

	//WMLAbstractMacroCall:
	//	WMLMacroInclude | WMLMacroCall;
	public WMLAbstractMacroCallElements getWMLAbstractMacroCallAccess() {
		return (pWMLAbstractMacroCall != null) ? pWMLAbstractMacroCall : (pWMLAbstractMacroCall = new WMLAbstractMacroCallElements());
	}
	
	public ParserRule getWMLAbstractMacroCallRule() {
		return getWMLAbstractMacroCallAccess().getRule();
	}

	//WMLMacroInclude:
	//	"{" "~" path=WMLKeyValue "}";
	public WMLMacroIncludeElements getWMLMacroIncludeAccess() {
		return (pWMLMacroInclude != null) ? pWMLMacroInclude : (pWMLMacroInclude = new WMLMacroIncludeElements());
	}
	
	public ParserRule getWMLMacroIncludeRule() {
		return getWMLMacroIncludeAccess().getRule();
	}

	//WMLMacroCall:
	//	"{" name=ID params+=WMLAbstractKeyValue? "}";
	public WMLMacroCallElements getWMLMacroCallAccess() {
		return (pWMLMacroCall != null) ? pWMLMacroCall : (pWMLMacroCall = new WMLMacroCallElements());
	}
	
	public ParserRule getWMLMacroCallRule() {
		return getWMLMacroCallAccess().getRule();
	}

	//WMLAbstractKeyValue:
	//	WMLKeyValue | WMLMacroCall;
	public WMLAbstractKeyValueElements getWMLAbstractKeyValueAccess() {
		return (pWMLAbstractKeyValue != null) ? pWMLAbstractKeyValue : (pWMLAbstractKeyValue = new WMLAbstractKeyValueElements());
	}
	
	public ParserRule getWMLAbstractKeyValueRule() {
		return getWMLAbstractKeyValueAccess().getRule();
	}

	//WMLKeyValue returns ecore::EString:
	//	WMLANYVALUE+;
	public WMLKeyValueElements getWMLKeyValueAccess() {
		return (pWMLKeyValue != null) ? pWMLKeyValue : (pWMLKeyValue = new WMLKeyValueElements());
	}
	
	public ParserRule getWMLKeyValueRule() {
		return getWMLKeyValueAccess().getRule();
	}

	//WMLANYVALUE returns ecore::EString:
	//	ID | INT | STRING | TSTRING | ANY_OTHER;
	public WMLANYVALUEElements getWMLANYVALUEAccess() {
		return (pWMLANYVALUE != null) ? pWMLANYVALUE : (pWMLANYVALUE = new WMLANYVALUEElements());
	}
	
	public ParserRule getWMLANYVALUERule() {
		return getWMLANYVALUEAccess().getRule();
	}

	//TSTRING returns ecore::EString:
	//	"_" STRING;
	public TSTRINGElements getTSTRINGAccess() {
		return (pTSTRING != null) ? pTSTRING : (pTSTRING = new TSTRINGElements());
	}
	
	public ParserRule getTSTRINGRule() {
		return getTSTRINGAccess().getRule();
	}

	//terminal ID:
	//	("a".."z" | "A".."Z" | "_" | "-") ("a".."z" | "A".."Z" | "_" | "0".."9" | "-")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal SL_COMMENT:
	//	"#" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal EOL:
	//	("\r" | "\n")+;
	public TerminalRule getEOLRule() {
		return (tEOL != null) ? tEOL : (tEOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EOL"));
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
