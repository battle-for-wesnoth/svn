/*
* generated by Xtext
*/
grammar InternalWML;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.wesnoth.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.wesnoth.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.wesnoth.services.WMLGrammarAccess;

}

@parser::members {

 	private WMLGrammarAccess grammarAccess;
 	
    public InternalWMLParser(TokenStream input, IAstFactory factory, WMLGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/wesnoth/parser/antlr/internal/InternalWML.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "WMLRoot";	
   	}
   	
   	@Override
   	protected WMLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleWMLRoot
entryRuleWMLRoot returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getWMLRootRule(), currentNode); }
	 iv_ruleWMLRoot=ruleWMLRoot 
	 { $current=$iv_ruleWMLRoot.current; } 
	 EOF 
;

// Rule WMLRoot
ruleWMLRoot returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWMLRootAccess().getRtagsWMLTagParserRuleCall_0_0(), currentNode); 
	    }
		lv_Rtags_0_0=ruleWMLTag		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWMLRootRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"Rtags",
	        		lv_Rtags_0_0, 
	        		"WMLTag", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWMLRootAccess().getRmacrosWMLMacroParserRuleCall_1_0(), currentNode); 
	    }
		lv_Rmacros_1_0=ruleWMLMacro		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWMLRootRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"Rmacros",
	        		lv_Rmacros_1_0, 
	        		"WMLMacro", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*
;





// Entry rule entryRuleWMLMacro
entryRuleWMLMacro returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getWMLMacroRule(), currentNode); }
	 iv_ruleWMLMacro=ruleWMLMacro 
	 { $current=$iv_ruleWMLMacro.current; } 
	 EOF 
;

// Rule WMLMacro
ruleWMLMacro returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'{' 
    {
        createLeafNode(grammarAccess.getWMLMacroAccess().getLeftCurlyBracketKeyword_0(), null); 
    }
(
(
		lv_tagcontent_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getWMLMacroAccess().getTagcontentIDTerminalRuleCall_1_0(), "tagcontent"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWMLMacroRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"tagcontent",
	        		lv_tagcontent_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)+	'}' 
    {
        createLeafNode(grammarAccess.getWMLMacroAccess().getRightCurlyBracketKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleWMLTag
entryRuleWMLTag returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getWMLTagRule(), currentNode); }
	 iv_ruleWMLTag=ruleWMLTag 
	 { $current=$iv_ruleWMLTag.current; } 
	 EOF 
;

// Rule WMLTag
ruleWMLTag returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWMLTagAccess().getStartWMLStartTagParserRuleCall_0_0(), currentNode); 
	    }
		lv_start_0_0=ruleWMLStartTag		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWMLTagRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"start",
	        		lv_start_0_0, 
	        		"WMLStartTag", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWMLTagAccess().getTtagsWMLTagParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_Ttags_1_0=ruleWMLTag		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWMLTagRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"Ttags",
	        		lv_Ttags_1_0, 
	        		"WMLTag", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWMLTagAccess().getTkeysWMLKeyParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_Tkeys_2_0=ruleWMLKey		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWMLTagRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"Tkeys",
	        		lv_Tkeys_2_0, 
	        		"WMLKey", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWMLTagAccess().getTmacrosWMLMacroParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_Tmacros_3_0=ruleWMLMacro		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWMLTagRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"Tmacros",
	        		lv_Tmacros_3_0, 
	        		"WMLMacro", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWMLTagAccess().getEndWMLEndTagParserRuleCall_2_0(), currentNode); 
	    }
		lv_end_4_0=ruleWMLEndTag		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWMLTagRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"end",
	        		lv_end_4_0, 
	        		"WMLEndTag", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleWMLStartTag
entryRuleWMLStartTag returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getWMLStartTagRule(), currentNode); }
	 iv_ruleWMLStartTag=ruleWMLStartTag 
	 { $current=$iv_ruleWMLStartTag.current; } 
	 EOF 
;

// Rule WMLStartTag
ruleWMLStartTag returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'[' 
    {
        createLeafNode(grammarAccess.getWMLStartTagAccess().getLeftSquareBracketKeyword_0(), null); 
    }
(
(
		lv_tagname_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getWMLStartTagAccess().getTagnameIDTerminalRuleCall_1_0(), "tagname"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWMLStartTagRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"tagname",
	        		lv_tagname_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	']' 
    {
        createLeafNode(grammarAccess.getWMLStartTagAccess().getRightSquareBracketKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleWMLEndTag
entryRuleWMLEndTag returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getWMLEndTagRule(), currentNode); }
	 iv_ruleWMLEndTag=ruleWMLEndTag 
	 { $current=$iv_ruleWMLEndTag.current; } 
	 EOF 
;

// Rule WMLEndTag
ruleWMLEndTag returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'[/' 
    {
        createLeafNode(grammarAccess.getWMLEndTagAccess().getLeftSquareBracketSolidusKeyword_0(), null); 
    }
(
(
		lv_tagname_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getWMLEndTagAccess().getTagnameIDTerminalRuleCall_1_0(), "tagname"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWMLEndTagRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"tagname",
	        		lv_tagname_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	']' 
    {
        createLeafNode(grammarAccess.getWMLEndTagAccess().getRightSquareBracketKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleWMLKey
entryRuleWMLKey returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getWMLKeyRule(), currentNode); }
	 iv_ruleWMLKey=ruleWMLKey 
	 { $current=$iv_ruleWMLKey.current; } 
	 EOF 
;

// Rule WMLKey
ruleWMLKey returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_keyName_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getWMLKeyAccess().getKeyNameIDTerminalRuleCall_0_0(), "keyName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWMLKeyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"keyName",
	        		lv_keyName_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'=' 
    {
        createLeafNode(grammarAccess.getWMLKeyAccess().getEqualsSignKeyword_1(), null); 
    }
(
(
(
		lv_keyValue_2_1=RULE_ID
		{
			createLeafNode(grammarAccess.getWMLKeyAccess().getKeyValueIDTerminalRuleCall_2_0_0(), "keyValue"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWMLKeyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"keyValue",
	        		lv_keyValue_2_1, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_keyValue_2_2=RULE_STRING
		{
			createLeafNode(grammarAccess.getWMLKeyAccess().getKeyValueSTRINGTerminalRuleCall_2_0_1(), "keyValue"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWMLKeyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"keyValue",
	        		lv_keyValue_2_2, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getWMLKeyAccess().getKeyValueFLOATParserRuleCall_2_0_2(), currentNode); 
	    }
		lv_keyValue_2_3=ruleFLOAT		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWMLKeyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"keyValue",
	        		lv_keyValue_2_3, 
	        		"FLOAT", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))
;





// Entry rule entryRuleFLOAT
entryRuleFLOAT returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ currentNode = createCompositeNode(grammarAccess.getFLOATRule(), currentNode); } 
	 iv_ruleFLOAT=ruleFLOAT 
	 { $current=$iv_ruleFLOAT.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule FLOAT
ruleFLOAT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    createLeafNode(grammarAccess.getFLOATAccess().getINTTerminalRuleCall_0(), null); 
    }

	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getFLOATAccess().getFullStopKeyword_1(), null); 
    }
(    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    createLeafNode(grammarAccess.getFLOATAccess().getINTTerminalRuleCall_2(), null); 
    }
)+)
    ;
finally {
	myHiddenTokenState.restore();
}





RULE_SL_COMMENT : '#' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ID : ('a'..'z'|'A'..'Z'|'_'|' '|'0'..'9')*;

RULE_IDENH : ('a'..'z'|'A'..'Z'|'_') (' '|'a'..'z'|'A'..'Z'|'_'|'0'..'9')* ('a'..'z'|'A'..'Z');

RULE_INT : ('0'..'9')+;

RULE_STRING : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"';


