/*
* generated by Xtext
*/
package org.wesnoth.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IEObjectConsumer;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.wesnoth.services.WMLGrammarAccess;

import com.google.inject.Inject;

@SuppressWarnings("all")
public class WMLParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private WMLGrammarAccess grammarAccess;
	
	@Override
	protected AbstractToken getRootToken(IEObjectConsumer inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IEObjectConsumer inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLRoot_ExpressionsAssignment(this, this, 0, inst);
			case 1: return new WMLGrammarElement_Alternatives(this, this, 1, inst);
			case 2: return new WMLTag_Group(this, this, 2, inst);
			case 3: return new WMLKey_Group(this, this, 3, inst);
			case 4: return new WMLKeyValue_Alternatives(this, this, 4, inst);
			case 5: return new WMLMacroCall_Group(this, this, 5, inst);
			case 6: return new WMLMacroCallParameter_Alternatives(this, this, 6, inst);
			case 7: return new WMLArrayCall_Group(this, this, 7, inst);
			case 8: return new WMLMacroDefine_Group(this, this, 8, inst);
			case 9: return new WMLPreprocIF_Group(this, this, 9, inst);
			case 10: return new WMLRootExpression_Alternatives(this, this, 10, inst);
			case 11: return new WMLExpression_Alternatives(this, this, 11, inst);
			case 12: return new WMLValuedExpression_Alternatives(this, this, 12, inst);
			case 13: return new WMLTextdomain_NameAssignment(this, this, 13, inst);
			case 14: return new WMLLuaCode_ValueAssignment(this, this, 14, inst);
			case 15: return new WMLMacroParameter_Alternatives(this, this, 15, inst);
			case 16: return new WMLValue_ValueAssignment(this, this, 16, inst);
			case 17: return new MacroTokens_ValueAssignment(this, this, 17, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule WMLRoot ****************
 *
 * WMLRoot:
 * 	Expressions+=WMLRootExpression*;
 *
 **/

// Expressions+=WMLRootExpression*
protected class WMLRoot_ExpressionsAssignment extends AssignmentToken  {
	
	public WMLRoot_ExpressionsAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWMLRootAccess().getExpressionsAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLRootExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Expressions",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Expressions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getWMLRootExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getWMLRootAccess().getExpressionsWMLRootExpressionParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WMLRoot_ExpressionsAssignment(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

/************ end Rule WMLRoot ****************/


/************ begin Rule WMLGrammarElement ****************
 *
 * // Dummy grammar element to act as the super of all WML grammar elements
 * WMLGrammarElement:
 * 	WMLRoot | WMLValuedExpression | WMLKeyValue | WMLMacroCallParameter;
 *
 **/

// WMLRoot | WMLValuedExpression | WMLKeyValue | WMLMacroCallParameter
protected class WMLGrammarElement_Alternatives extends AlternativesToken {

	public WMLGrammarElement_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getWMLGrammarElementAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLGrammarElement_WMLRootParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new WMLGrammarElement_WMLValuedExpressionParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new WMLGrammarElement_WMLKeyValueParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new WMLGrammarElement_WMLMacroCallParameterParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMacroTokensRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLArrayCallRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLKeyRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLLuaCodeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLMacroCallRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLMacroDefineRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLPreprocIFRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLRootRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLTagRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLTextdomainRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLValueRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// WMLRoot
protected class WMLGrammarElement_WMLRootParserRuleCall_0 extends RuleCallToken {
	
	public WMLGrammarElement_WMLRootParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getWMLGrammarElementAccess().getWMLRootParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLRoot_ExpressionsAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWMLRootRule().getType().getClassifier())
			return null;
		if(checkForRecursion(WMLRoot_ExpressionsAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// WMLValuedExpression
protected class WMLGrammarElement_WMLValuedExpressionParserRuleCall_1 extends RuleCallToken {
	
	public WMLGrammarElement_WMLValuedExpressionParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getWMLGrammarElementAccess().getWMLValuedExpressionParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLValuedExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWMLKeyRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLMacroCallRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLMacroDefineRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLPreprocIFRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLTagRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLTextdomainRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLValueRule().getType().getClassifier())
			return null;
		if(checkForRecursion(WMLValuedExpression_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// WMLKeyValue
protected class WMLGrammarElement_WMLKeyValueParserRuleCall_2 extends RuleCallToken {
	
	public WMLGrammarElement_WMLKeyValueParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getWMLGrammarElementAccess().getWMLKeyValueParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLKeyValue_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWMLArrayCallRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLLuaCodeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLMacroCallRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLValueRule().getType().getClassifier())
			return null;
		if(checkForRecursion(WMLKeyValue_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// WMLMacroCallParameter
protected class WMLGrammarElement_WMLMacroCallParameterParserRuleCall_3 extends RuleCallToken {
	
	public WMLGrammarElement_WMLMacroCallParameterParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getWMLGrammarElementAccess().getWMLMacroCallParameterParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLMacroCallParameter_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMacroTokensRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLMacroCallRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLValueRule().getType().getClassifier())
			return null;
		if(checkForRecursion(WMLMacroCallParameter_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule WMLGrammarElement ****************/


/************ begin Rule WMLTag ****************
 *
 * WMLTag:
 * 	"[" plus="+"? name=ID "]" Expressions+=WMLExpression* "[/" endName=ID "]";
 *
 **/

// "[" plus="+"? name=ID "]" Expressions+=WMLExpression* "[/" endName=ID "]"
protected class WMLTag_Group extends GroupToken {
	
	public WMLTag_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getWMLTagAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLTag_RightSquareBracketKeyword_7(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWMLTagRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "["
protected class WMLTag_LeftSquareBracketKeyword_0 extends KeywordToken  {
	
	public WMLTag_LeftSquareBracketKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWMLTagAccess().getLeftSquareBracketKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// plus="+"?
protected class WMLTag_PlusAssignment_1 extends AssignmentToken  {
	
	public WMLTag_PlusAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWMLTagAccess().getPlusAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLTag_LeftSquareBracketKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("plus",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("plus");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getWMLTagAccess().getPlusPlusSignKeyword_1_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWMLTagAccess().getPlusPlusSignKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// name=ID
protected class WMLTag_NameAssignment_2 extends AssignmentToken  {
	
	public WMLTag_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWMLTagAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLTag_PlusAssignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new WMLTag_LeftSquareBracketKeyword_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getWMLTagAccess().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getWMLTagAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "]"
protected class WMLTag_RightSquareBracketKeyword_3 extends KeywordToken  {
	
	public WMLTag_RightSquareBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWMLTagAccess().getRightSquareBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLTag_NameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// Expressions+=WMLExpression*
protected class WMLTag_ExpressionsAssignment_4 extends AssignmentToken  {
	
	public WMLTag_ExpressionsAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWMLTagAccess().getExpressionsAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Expressions",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Expressions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getWMLExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getWMLTagAccess().getExpressionsWMLExpressionParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WMLTag_ExpressionsAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new WMLTag_RightSquareBracketKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "[/"
protected class WMLTag_LeftSquareBracketSolidusKeyword_5 extends KeywordToken  {
	
	public WMLTag_LeftSquareBracketSolidusKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWMLTagAccess().getLeftSquareBracketSolidusKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLTag_ExpressionsAssignment_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new WMLTag_RightSquareBracketKeyword_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// endName=ID
protected class WMLTag_EndNameAssignment_6 extends AssignmentToken  {
	
	public WMLTag_EndNameAssignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWMLTagAccess().getEndNameAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLTag_LeftSquareBracketSolidusKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("endName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("endName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getWMLTagAccess().getEndNameIDTerminalRuleCall_6_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getWMLTagAccess().getEndNameIDTerminalRuleCall_6_0();
			return obj;
		}
		return null;
	}

}

// "]"
protected class WMLTag_RightSquareBracketKeyword_7 extends KeywordToken  {
	
	public WMLTag_RightSquareBracketKeyword_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWMLTagAccess().getRightSquareBracketKeyword_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLTag_EndNameAssignment_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule WMLTag ****************/


/************ begin Rule WMLKey ****************
 *
 * WMLKey hidden(WS):
 * 	name=ID "=" values+=WMLKeyValue* (EOL? "+" EOL? values+=WMLKeyValue+)* eol=(EOL | SL_COMMENT);
 *
 **/

// name=ID "=" values+=WMLKeyValue* (EOL? "+" EOL? values+=WMLKeyValue+)* eol=(EOL | SL_COMMENT)
protected class WMLKey_Group extends GroupToken {
	
	public WMLKey_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getWMLKeyAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLKey_EolAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWMLKeyRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name=ID
protected class WMLKey_NameAssignment_0 extends AssignmentToken  {
	
	public WMLKey_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWMLKeyAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getWMLKeyAccess().getNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getWMLKeyAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "="
protected class WMLKey_EqualsSignKeyword_1 extends KeywordToken  {
	
	public WMLKey_EqualsSignKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWMLKeyAccess().getEqualsSignKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLKey_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// values+=WMLKeyValue*
protected class WMLKey_ValuesAssignment_2 extends AssignmentToken  {
	
	public WMLKey_ValuesAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWMLKeyAccess().getValuesAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLKeyValue_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("values",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("values");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getWMLKeyValueRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getWMLKeyAccess().getValuesWMLKeyValueParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WMLKey_ValuesAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new WMLKey_EqualsSignKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// (EOL? "+" EOL? values+=WMLKeyValue+)*
protected class WMLKey_Group_3 extends GroupToken {
	
	public WMLKey_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getWMLKeyAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLKey_ValuesAssignment_3_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "+"
protected class WMLKey_PlusSignKeyword_3_1 extends KeywordToken  {
	
	public WMLKey_PlusSignKeyword_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWMLKeyAccess().getPlusSignKeyword_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLKey_ValuesAssignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new WMLKey_EqualsSignKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// values+=WMLKeyValue+
protected class WMLKey_ValuesAssignment_3_3 extends AssignmentToken  {
	
	public WMLKey_ValuesAssignment_3_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWMLKeyAccess().getValuesAssignment_3_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLKeyValue_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("values",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("values");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getWMLKeyValueRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getWMLKeyAccess().getValuesWMLKeyValueParserRuleCall_3_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WMLKey_ValuesAssignment_3_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new WMLKey_PlusSignKeyword_3_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// eol=(EOL | SL_COMMENT)
protected class WMLKey_EolAssignment_4 extends AssignmentToken  {
	
	public WMLKey_EolAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWMLKeyAccess().getEolAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLKey_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new WMLKey_ValuesAssignment_2(lastRuleCallOrigin, this, 1, inst);
			case 2: return new WMLKey_EqualsSignKeyword_1(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("eol",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("eol");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getWMLKeyAccess().getEolEOLTerminalRuleCall_4_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getWMLKeyAccess().getEolEOLTerminalRuleCall_4_0_0();
			return obj;
		}
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getWMLKeyAccess().getEolSL_COMMENTTerminalRuleCall_4_0_1(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getWMLKeyAccess().getEolSL_COMMENTTerminalRuleCall_4_0_1();
			return obj;
		}
		return null;
	}

}


/************ end Rule WMLKey ****************/


/************ begin Rule WMLKeyValue ****************
 *
 * WMLKeyValue:
 * 	WMLValue | WMLMacroCall | WMLLuaCode | WMLArrayCall;
 *
 **/

// WMLValue | WMLMacroCall | WMLLuaCode | WMLArrayCall
protected class WMLKeyValue_Alternatives extends AlternativesToken {

	public WMLKeyValue_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getWMLKeyValueAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLKeyValue_WMLValueParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new WMLKeyValue_WMLMacroCallParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new WMLKeyValue_WMLLuaCodeParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new WMLKeyValue_WMLArrayCallParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWMLArrayCallRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLLuaCodeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLMacroCallRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLValueRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// WMLValue
protected class WMLKeyValue_WMLValueParserRuleCall_0 extends RuleCallToken {
	
	public WMLKeyValue_WMLValueParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getWMLKeyValueAccess().getWMLValueParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLValue_ValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWMLValueRule().getType().getClassifier())
			return null;
		if(checkForRecursion(WMLValue_ValueAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// WMLMacroCall
protected class WMLKeyValue_WMLMacroCallParserRuleCall_1 extends RuleCallToken {
	
	public WMLKeyValue_WMLMacroCallParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getWMLKeyValueAccess().getWMLMacroCallParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLMacroCall_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWMLMacroCallRule().getType().getClassifier())
			return null;
		if(checkForRecursion(WMLMacroCall_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// WMLLuaCode
protected class WMLKeyValue_WMLLuaCodeParserRuleCall_2 extends RuleCallToken {
	
	public WMLKeyValue_WMLLuaCodeParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getWMLKeyValueAccess().getWMLLuaCodeParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLLuaCode_ValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWMLLuaCodeRule().getType().getClassifier())
			return null;
		if(checkForRecursion(WMLLuaCode_ValueAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// WMLArrayCall
protected class WMLKeyValue_WMLArrayCallParserRuleCall_3 extends RuleCallToken {
	
	public WMLKeyValue_WMLArrayCallParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getWMLKeyValueAccess().getWMLArrayCallParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLArrayCall_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWMLArrayCallRule().getType().getClassifier())
			return null;
		if(checkForRecursion(WMLArrayCall_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule WMLKeyValue ****************/


/************ begin Rule WMLMacroCall ****************
 *
 * WMLMacroCall:
 * 	"{" point="./"? relative="~"? name=ID Parameters+=WMLMacroCallParameter* "}";
 *
 **/

// "{" point="./"? relative="~"? name=ID Parameters+=WMLMacroCallParameter* "}"
protected class WMLMacroCall_Group extends GroupToken {
	
	public WMLMacroCall_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getWMLMacroCallAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLMacroCall_RightCurlyBracketKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWMLMacroCallRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "{"
protected class WMLMacroCall_LeftCurlyBracketKeyword_0 extends KeywordToken  {
	
	public WMLMacroCall_LeftCurlyBracketKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWMLMacroCallAccess().getLeftCurlyBracketKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// point="./"?
protected class WMLMacroCall_PointAssignment_1 extends AssignmentToken  {
	
	public WMLMacroCall_PointAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWMLMacroCallAccess().getPointAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLMacroCall_LeftCurlyBracketKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("point",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("point");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getWMLMacroCallAccess().getPointFullStopSolidusKeyword_1_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWMLMacroCallAccess().getPointFullStopSolidusKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// relative="~"?
protected class WMLMacroCall_RelativeAssignment_2 extends AssignmentToken  {
	
	public WMLMacroCall_RelativeAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWMLMacroCallAccess().getRelativeAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLMacroCall_PointAssignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new WMLMacroCall_LeftCurlyBracketKeyword_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("relative",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("relative");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getWMLMacroCallAccess().getRelativeTildeKeyword_2_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWMLMacroCallAccess().getRelativeTildeKeyword_2_0();
			return obj;
		}
		return null;
	}

}

// name=ID
protected class WMLMacroCall_NameAssignment_3 extends AssignmentToken  {
	
	public WMLMacroCall_NameAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWMLMacroCallAccess().getNameAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLMacroCall_RelativeAssignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new WMLMacroCall_PointAssignment_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new WMLMacroCall_LeftCurlyBracketKeyword_0(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getWMLMacroCallAccess().getNameIDTerminalRuleCall_3_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getWMLMacroCallAccess().getNameIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// Parameters+=WMLMacroCallParameter*
protected class WMLMacroCall_ParametersAssignment_4 extends AssignmentToken  {
	
	public WMLMacroCall_ParametersAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWMLMacroCallAccess().getParametersAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLMacroCallParameter_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Parameters",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getWMLMacroCallParameterRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getWMLMacroCallAccess().getParametersWMLMacroCallParameterParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WMLMacroCall_ParametersAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new WMLMacroCall_NameAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class WMLMacroCall_RightCurlyBracketKeyword_5 extends KeywordToken  {
	
	public WMLMacroCall_RightCurlyBracketKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWMLMacroCallAccess().getRightCurlyBracketKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLMacroCall_ParametersAssignment_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new WMLMacroCall_NameAssignment_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule WMLMacroCall ****************/


/************ begin Rule WMLMacroCallParameter ****************
 *
 * WMLMacroCallParameter:
 * 	WMLMacroParameter | WMLMacroCall;
 *
 **/

// WMLMacroParameter | WMLMacroCall
protected class WMLMacroCallParameter_Alternatives extends AlternativesToken {

	public WMLMacroCallParameter_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getWMLMacroCallParameterAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLMacroCallParameter_WMLMacroParameterParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new WMLMacroCallParameter_WMLMacroCallParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMacroTokensRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLMacroCallRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLValueRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// WMLMacroParameter
protected class WMLMacroCallParameter_WMLMacroParameterParserRuleCall_0 extends RuleCallToken {
	
	public WMLMacroCallParameter_WMLMacroParameterParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getWMLMacroCallParameterAccess().getWMLMacroParameterParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLMacroParameter_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMacroTokensRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLValueRule().getType().getClassifier())
			return null;
		if(checkForRecursion(WMLMacroParameter_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// WMLMacroCall
protected class WMLMacroCallParameter_WMLMacroCallParserRuleCall_1 extends RuleCallToken {
	
	public WMLMacroCallParameter_WMLMacroCallParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getWMLMacroCallParameterAccess().getWMLMacroCallParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLMacroCall_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWMLMacroCallRule().getType().getClassifier())
			return null;
		if(checkForRecursion(WMLMacroCall_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule WMLMacroCallParameter ****************/


/************ begin Rule WMLArrayCall ****************
 *
 * WMLArrayCall:
 * 	"[" value+=WMLValue+ "]";
 *
 **/

// "[" value+=WMLValue+ "]"
protected class WMLArrayCall_Group extends GroupToken {
	
	public WMLArrayCall_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getWMLArrayCallAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLArrayCall_RightSquareBracketKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWMLArrayCallRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "["
protected class WMLArrayCall_LeftSquareBracketKeyword_0 extends KeywordToken  {
	
	public WMLArrayCall_LeftSquareBracketKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWMLArrayCallAccess().getLeftSquareBracketKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// value+=WMLValue+
protected class WMLArrayCall_ValueAssignment_1 extends AssignmentToken  {
	
	public WMLArrayCall_ValueAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWMLArrayCallAccess().getValueAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLValue_ValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getWMLValueRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getWMLArrayCallAccess().getValueWMLValueParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WMLArrayCall_ValueAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new WMLArrayCall_LeftSquareBracketKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "]"
protected class WMLArrayCall_RightSquareBracketKeyword_2 extends KeywordToken  {
	
	public WMLArrayCall_RightSquareBracketKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWMLArrayCallAccess().getRightSquareBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLArrayCall_ValueAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule WMLArrayCall ****************/


/************ begin Rule WMLMacroDefine ****************
 *
 * WMLMacroDefine:
 * 	name=DEFINE Expressions+=WMLValuedExpression* endName=ENDDEF;
 *
 **/

// name=DEFINE Expressions+=WMLValuedExpression* endName=ENDDEF
protected class WMLMacroDefine_Group extends GroupToken {
	
	public WMLMacroDefine_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getWMLMacroDefineAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLMacroDefine_EndNameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWMLMacroDefineRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name=DEFINE
protected class WMLMacroDefine_NameAssignment_0 extends AssignmentToken  {
	
	public WMLMacroDefine_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWMLMacroDefineAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getWMLMacroDefineAccess().getNameDEFINETerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getWMLMacroDefineAccess().getNameDEFINETerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// Expressions+=WMLValuedExpression*
protected class WMLMacroDefine_ExpressionsAssignment_1 extends AssignmentToken  {
	
	public WMLMacroDefine_ExpressionsAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWMLMacroDefineAccess().getExpressionsAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLValuedExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Expressions",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Expressions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getWMLValuedExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getWMLMacroDefineAccess().getExpressionsWMLValuedExpressionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WMLMacroDefine_ExpressionsAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new WMLMacroDefine_NameAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// endName=ENDDEF
protected class WMLMacroDefine_EndNameAssignment_2 extends AssignmentToken  {
	
	public WMLMacroDefine_EndNameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWMLMacroDefineAccess().getEndNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLMacroDefine_ExpressionsAssignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new WMLMacroDefine_NameAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("endName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("endName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getWMLMacroDefineAccess().getEndNameENDDEFTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getWMLMacroDefineAccess().getEndNameENDDEFTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule WMLMacroDefine ****************/


/************ begin Rule WMLPreprocIF ****************
 *
 * WMLPreprocIF:
 * 	name=(IFDEF | IFNDEF | IFHAVE | IFNHAVE) Expressions+=WMLValuedExpression* (Elses=ELSE
 * 	ElseExpressions+=WMLValuedExpression+)? endName=ENDIF;
 *
 **/

// name=(IFDEF | IFNDEF | IFHAVE | IFNHAVE) Expressions+=WMLValuedExpression* (Elses=ELSE
// ElseExpressions+=WMLValuedExpression+)? endName=ENDIF
protected class WMLPreprocIF_Group extends GroupToken {
	
	public WMLPreprocIF_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getWMLPreprocIFAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLPreprocIF_EndNameAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWMLPreprocIFRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name=(IFDEF | IFNDEF | IFHAVE | IFNHAVE)
protected class WMLPreprocIF_NameAssignment_0 extends AssignmentToken  {
	
	public WMLPreprocIF_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWMLPreprocIFAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getWMLPreprocIFAccess().getNameIFDEFTerminalRuleCall_0_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getWMLPreprocIFAccess().getNameIFDEFTerminalRuleCall_0_0_0();
			return obj;
		}
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getWMLPreprocIFAccess().getNameIFNDEFTerminalRuleCall_0_0_1(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getWMLPreprocIFAccess().getNameIFNDEFTerminalRuleCall_0_0_1();
			return obj;
		}
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getWMLPreprocIFAccess().getNameIFHAVETerminalRuleCall_0_0_2(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getWMLPreprocIFAccess().getNameIFHAVETerminalRuleCall_0_0_2();
			return obj;
		}
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getWMLPreprocIFAccess().getNameIFNHAVETerminalRuleCall_0_0_3(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getWMLPreprocIFAccess().getNameIFNHAVETerminalRuleCall_0_0_3();
			return obj;
		}
		return null;
	}

}

// Expressions+=WMLValuedExpression*
protected class WMLPreprocIF_ExpressionsAssignment_1 extends AssignmentToken  {
	
	public WMLPreprocIF_ExpressionsAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWMLPreprocIFAccess().getExpressionsAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLValuedExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Expressions",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Expressions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getWMLValuedExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getWMLPreprocIFAccess().getExpressionsWMLValuedExpressionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WMLPreprocIF_ExpressionsAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new WMLPreprocIF_NameAssignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// (Elses=ELSE ElseExpressions+=WMLValuedExpression+)?
protected class WMLPreprocIF_Group_2 extends GroupToken {
	
	public WMLPreprocIF_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getWMLPreprocIFAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLPreprocIF_ElseExpressionsAssignment_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// Elses=ELSE
protected class WMLPreprocIF_ElsesAssignment_2_0 extends AssignmentToken  {
	
	public WMLPreprocIF_ElsesAssignment_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWMLPreprocIFAccess().getElsesAssignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLPreprocIF_ExpressionsAssignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new WMLPreprocIF_NameAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Elses",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Elses");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getWMLPreprocIFAccess().getElsesELSETerminalRuleCall_2_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getWMLPreprocIFAccess().getElsesELSETerminalRuleCall_2_0_0();
			return obj;
		}
		return null;
	}

}

// ElseExpressions+=WMLValuedExpression+
protected class WMLPreprocIF_ElseExpressionsAssignment_2_1 extends AssignmentToken  {
	
	public WMLPreprocIF_ElseExpressionsAssignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWMLPreprocIFAccess().getElseExpressionsAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLValuedExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ElseExpressions",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ElseExpressions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getWMLValuedExpressionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getWMLPreprocIFAccess().getElseExpressionsWMLValuedExpressionParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new WMLPreprocIF_ElseExpressionsAssignment_2_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new WMLPreprocIF_ElsesAssignment_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// endName=ENDIF
protected class WMLPreprocIF_EndNameAssignment_3 extends AssignmentToken  {
	
	public WMLPreprocIF_EndNameAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWMLPreprocIFAccess().getEndNameAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLPreprocIF_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new WMLPreprocIF_ExpressionsAssignment_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new WMLPreprocIF_NameAssignment_0(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("endName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("endName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getWMLPreprocIFAccess().getEndNameENDIFTerminalRuleCall_3_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getWMLPreprocIFAccess().getEndNameENDIFTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule WMLPreprocIF ****************/


/************ begin Rule WMLRootExpression ****************
 *
 * WMLRootExpression:
 * 	WMLTag | WMLMacroCall | WMLMacroDefine | WMLTextdomain | WMLPreprocIF;
 *
 **/

// WMLTag | WMLMacroCall | WMLMacroDefine | WMLTextdomain | WMLPreprocIF
protected class WMLRootExpression_Alternatives extends AlternativesToken {

	public WMLRootExpression_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getWMLRootExpressionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLRootExpression_WMLTagParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new WMLRootExpression_WMLMacroCallParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new WMLRootExpression_WMLMacroDefineParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new WMLRootExpression_WMLTextdomainParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new WMLRootExpression_WMLPreprocIFParserRuleCall_4(lastRuleCallOrigin, this, 4, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWMLMacroCallRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLMacroDefineRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLPreprocIFRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLTagRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLTextdomainRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// WMLTag
protected class WMLRootExpression_WMLTagParserRuleCall_0 extends RuleCallToken {
	
	public WMLRootExpression_WMLTagParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getWMLRootExpressionAccess().getWMLTagParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLTag_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWMLTagRule().getType().getClassifier())
			return null;
		if(checkForRecursion(WMLTag_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// WMLMacroCall
protected class WMLRootExpression_WMLMacroCallParserRuleCall_1 extends RuleCallToken {
	
	public WMLRootExpression_WMLMacroCallParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getWMLRootExpressionAccess().getWMLMacroCallParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLMacroCall_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWMLMacroCallRule().getType().getClassifier())
			return null;
		if(checkForRecursion(WMLMacroCall_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// WMLMacroDefine
protected class WMLRootExpression_WMLMacroDefineParserRuleCall_2 extends RuleCallToken {
	
	public WMLRootExpression_WMLMacroDefineParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getWMLRootExpressionAccess().getWMLMacroDefineParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLMacroDefine_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWMLMacroDefineRule().getType().getClassifier())
			return null;
		if(checkForRecursion(WMLMacroDefine_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// WMLTextdomain
protected class WMLRootExpression_WMLTextdomainParserRuleCall_3 extends RuleCallToken {
	
	public WMLRootExpression_WMLTextdomainParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getWMLRootExpressionAccess().getWMLTextdomainParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLTextdomain_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWMLTextdomainRule().getType().getClassifier())
			return null;
		if(checkForRecursion(WMLTextdomain_NameAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// WMLPreprocIF
protected class WMLRootExpression_WMLPreprocIFParserRuleCall_4 extends RuleCallToken {
	
	public WMLRootExpression_WMLPreprocIFParserRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getWMLRootExpressionAccess().getWMLPreprocIFParserRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLPreprocIF_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWMLPreprocIFRule().getType().getClassifier())
			return null;
		if(checkForRecursion(WMLPreprocIF_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule WMLRootExpression ****************/


/************ begin Rule WMLExpression ****************
 *
 * WMLExpression:
 * 	WMLRootExpression | WMLKey;
 *
 **/

// WMLRootExpression | WMLKey
protected class WMLExpression_Alternatives extends AlternativesToken {

	public WMLExpression_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getWMLExpressionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLExpression_WMLRootExpressionParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new WMLExpression_WMLKeyParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWMLKeyRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLMacroCallRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLMacroDefineRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLPreprocIFRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLTagRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLTextdomainRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// WMLRootExpression
protected class WMLExpression_WMLRootExpressionParserRuleCall_0 extends RuleCallToken {
	
	public WMLExpression_WMLRootExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getWMLExpressionAccess().getWMLRootExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLRootExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWMLMacroCallRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLMacroDefineRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLPreprocIFRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLTagRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLTextdomainRule().getType().getClassifier())
			return null;
		if(checkForRecursion(WMLRootExpression_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// WMLKey
protected class WMLExpression_WMLKeyParserRuleCall_1 extends RuleCallToken {
	
	public WMLExpression_WMLKeyParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getWMLExpressionAccess().getWMLKeyParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLKey_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWMLKeyRule().getType().getClassifier())
			return null;
		if(checkForRecursion(WMLKey_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule WMLExpression ****************/


/************ begin Rule WMLValuedExpression ****************
 *
 * WMLValuedExpression:
 * 	WMLExpression | WMLValue;
 *
 **/

// WMLExpression | WMLValue
protected class WMLValuedExpression_Alternatives extends AlternativesToken {

	public WMLValuedExpression_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getWMLValuedExpressionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLValuedExpression_WMLExpressionParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new WMLValuedExpression_WMLValueParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWMLKeyRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLMacroCallRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLMacroDefineRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLPreprocIFRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLTagRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLTextdomainRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLValueRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// WMLExpression
protected class WMLValuedExpression_WMLExpressionParserRuleCall_0 extends RuleCallToken {
	
	public WMLValuedExpression_WMLExpressionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getWMLValuedExpressionAccess().getWMLExpressionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLExpression_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWMLKeyRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLMacroCallRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLMacroDefineRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLPreprocIFRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLTagRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLTextdomainRule().getType().getClassifier())
			return null;
		if(checkForRecursion(WMLExpression_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// WMLValue
protected class WMLValuedExpression_WMLValueParserRuleCall_1 extends RuleCallToken {
	
	public WMLValuedExpression_WMLValueParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getWMLValuedExpressionAccess().getWMLValueParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLValue_ValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWMLValueRule().getType().getClassifier())
			return null;
		if(checkForRecursion(WMLValue_ValueAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule WMLValuedExpression ****************/


/************ begin Rule WMLTextdomain ****************
 *
 * WMLTextdomain:
 * 	name=TEXTDOMAIN;
 *
 **/

// name=TEXTDOMAIN
protected class WMLTextdomain_NameAssignment extends AssignmentToken  {
	
	public WMLTextdomain_NameAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWMLTextdomainAccess().getNameAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWMLTextdomainRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getWMLTextdomainAccess().getNameTEXTDOMAINTerminalRuleCall_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getWMLTextdomainAccess().getNameTEXTDOMAINTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule WMLTextdomain ****************/


/************ begin Rule WMLLuaCode ****************
 *
 * WMLLuaCode:
 * 	value=LUA_CODE;
 *
 **/

// value=LUA_CODE
protected class WMLLuaCode_ValueAssignment extends AssignmentToken  {
	
	public WMLLuaCode_ValueAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWMLLuaCodeAccess().getValueAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWMLLuaCodeRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getWMLLuaCodeAccess().getValueLUA_CODETerminalRuleCall_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getWMLLuaCodeAccess().getValueLUA_CODETerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule WMLLuaCode ****************/


/************ begin Rule WMLMacroParameter ****************
 *
 * WMLMacroParameter:
 * 	WMLValue | MacroTokens;
 *
 **/

// WMLValue | MacroTokens
protected class WMLMacroParameter_Alternatives extends AlternativesToken {

	public WMLMacroParameter_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getWMLMacroParameterAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLMacroParameter_WMLValueParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new WMLMacroParameter_MacroTokensParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMacroTokensRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWMLValueRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// WMLValue
protected class WMLMacroParameter_WMLValueParserRuleCall_0 extends RuleCallToken {
	
	public WMLMacroParameter_WMLValueParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getWMLMacroParameterAccess().getWMLValueParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new WMLValue_ValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWMLValueRule().getType().getClassifier())
			return null;
		if(checkForRecursion(WMLValue_ValueAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// MacroTokens
protected class WMLMacroParameter_MacroTokensParserRuleCall_1 extends RuleCallToken {
	
	public WMLMacroParameter_MacroTokensParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getWMLMacroParameterAccess().getMacroTokensParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MacroTokens_ValueAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMacroTokensRule().getType().getClassifier())
			return null;
		if(checkForRecursion(MacroTokens_ValueAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule WMLMacroParameter ****************/


/************ begin Rule WMLValue ****************
 *
 * WMLValue:
 * 	value=(ID | STRING | "_" | "~" | "." | "./" | "$" | "/" | "(" | ")" | ANY_OTHER);
 *
 **/

// value=(ID | STRING | "_" | "~" | "." | "./" | "$" | "/" | "(" | ")" | ANY_OTHER)
protected class WMLValue_ValueAssignment extends AssignmentToken  {
	
	public WMLValue_ValueAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWMLValueAccess().getValueAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWMLValueRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getWMLValueAccess().getValue_Keyword_0_2(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWMLValueAccess().getValue_Keyword_0_2();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getWMLValueAccess().getValueTildeKeyword_0_3(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWMLValueAccess().getValueTildeKeyword_0_3();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getWMLValueAccess().getValueFullStopKeyword_0_4(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWMLValueAccess().getValueFullStopKeyword_0_4();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getWMLValueAccess().getValueFullStopSolidusKeyword_0_5(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWMLValueAccess().getValueFullStopSolidusKeyword_0_5();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getWMLValueAccess().getValueDollarSignKeyword_0_6(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWMLValueAccess().getValueDollarSignKeyword_0_6();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getWMLValueAccess().getValueSolidusKeyword_0_7(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWMLValueAccess().getValueSolidusKeyword_0_7();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getWMLValueAccess().getValueLeftParenthesisKeyword_0_8(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWMLValueAccess().getValueLeftParenthesisKeyword_0_8();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getWMLValueAccess().getValueRightParenthesisKeyword_0_9(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getWMLValueAccess().getValueRightParenthesisKeyword_0_9();
			return obj;
		}
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getWMLValueAccess().getValueIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getWMLValueAccess().getValueIDTerminalRuleCall_0_0();
			return obj;
		}
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getWMLValueAccess().getValueSTRINGTerminalRuleCall_0_1(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getWMLValueAccess().getValueSTRINGTerminalRuleCall_0_1();
			return obj;
		}
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getWMLValueAccess().getValueANY_OTHERTerminalRuleCall_0_10(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getWMLValueAccess().getValueANY_OTHERTerminalRuleCall_0_10();
			return obj;
		}
		return null;
	}

}

/************ end Rule WMLValue ****************/


/************ begin Rule MacroTokens ****************
 *
 * // we use this as a hack for any characters in the macro call
 * // so we won't trigger things like: key=value or [tag]
 * MacroTokens:
 * 	value=("=" | "[" | "]" | "+" | "[/");
 *
 **/

// value=("=" | "[" | "]" | "+" | "[/")
protected class MacroTokens_ValueAssignment extends AssignmentToken  {
	
	public MacroTokens_ValueAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMacroTokensAccess().getValueAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMacroTokensRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getMacroTokensAccess().getValueEqualsSignKeyword_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMacroTokensAccess().getValueEqualsSignKeyword_0_0();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getMacroTokensAccess().getValueLeftSquareBracketKeyword_0_1(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMacroTokensAccess().getValueLeftSquareBracketKeyword_0_1();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getMacroTokensAccess().getValueRightSquareBracketKeyword_0_2(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMacroTokensAccess().getValueRightSquareBracketKeyword_0_2();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getMacroTokensAccess().getValuePlusSignKeyword_0_3(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMacroTokensAccess().getValuePlusSignKeyword_0_3();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getMacroTokensAccess().getValueLeftSquareBracketSolidusKeyword_0_4(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMacroTokensAccess().getValueLeftSquareBracketSolidusKeyword_0_4();
			return obj;
		}
		return null;
	}

}

/************ end Rule MacroTokens ****************/

}
