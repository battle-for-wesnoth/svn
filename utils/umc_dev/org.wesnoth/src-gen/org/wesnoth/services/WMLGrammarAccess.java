/*
* generated by Xtext
*/

package org.wesnoth.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class WMLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class WMLRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLRoot");
		private final Assignment cExpressionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionsWMLRootExpressionParserRuleCall_0 = (RuleCall)cExpressionsAssignment.eContents().get(0);
		
		//WMLRoot:
		//	Expressions+=WMLRootExpression*;
		public ParserRule getRule() { return rule; }

		//Expressions+=WMLRootExpression*
		public Assignment getExpressionsAssignment() { return cExpressionsAssignment; }

		//WMLRootExpression
		public RuleCall getExpressionsWMLRootExpressionParserRuleCall_0() { return cExpressionsWMLRootExpressionParserRuleCall_0; }
	}

	public class WMLGrammarElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLGrammarElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWMLRootParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWMLValuedExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWMLKeyValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWMLMacroCallParameterParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// Dummy grammar element to act as the super of all WML grammar elements
		//WMLGrammarElement:
		//	WMLRoot | WMLValuedExpression | WMLKeyValue | WMLMacroCallParameter;
		public ParserRule getRule() { return rule; }

		//WMLRoot | WMLValuedExpression | WMLKeyValue | WMLMacroCallParameter
		public Alternatives getAlternatives() { return cAlternatives; }

		//WMLRoot
		public RuleCall getWMLRootParserRuleCall_0() { return cWMLRootParserRuleCall_0; }

		//WMLValuedExpression
		public RuleCall getWMLValuedExpressionParserRuleCall_1() { return cWMLValuedExpressionParserRuleCall_1; }

		//WMLKeyValue
		public RuleCall getWMLKeyValueParserRuleCall_2() { return cWMLKeyValueParserRuleCall_2; }

		//WMLMacroCallParameter
		public RuleCall getWMLMacroCallParameterParserRuleCall_3() { return cWMLMacroCallParameterParserRuleCall_3; }
	}

	public class WMLTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPlusAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cPlusPlusSignKeyword_1_0 = (Keyword)cPlusAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionsWMLExpressionParserRuleCall_4_0 = (RuleCall)cExpressionsAssignment_4.eContents().get(0);
		private final Keyword cLeftSquareBracketSolidusKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cEndNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cEndNameIDTerminalRuleCall_6_0 = (RuleCall)cEndNameAssignment_6.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//WMLTag:
		//	"[" plus="+"? name=ID "]" Expressions+=WMLExpression* "[/" endName=ID "]";
		public ParserRule getRule() { return rule; }

		//"[" plus="+"? name=ID "]" Expressions+=WMLExpression* "[/" endName=ID "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//plus="+"?
		public Assignment getPlusAssignment_1() { return cPlusAssignment_1; }

		//"+"
		public Keyword getPlusPlusSignKeyword_1_0() { return cPlusPlusSignKeyword_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }

		//Expressions+=WMLExpression*
		public Assignment getExpressionsAssignment_4() { return cExpressionsAssignment_4; }

		//WMLExpression
		public RuleCall getExpressionsWMLExpressionParserRuleCall_4_0() { return cExpressionsWMLExpressionParserRuleCall_4_0; }

		//"[/"
		public Keyword getLeftSquareBracketSolidusKeyword_5() { return cLeftSquareBracketSolidusKeyword_5; }

		//endName=ID
		public Assignment getEndNameAssignment_6() { return cEndNameAssignment_6; }

		//ID
		public RuleCall getEndNameIDTerminalRuleCall_6_0() { return cEndNameIDTerminalRuleCall_6_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }
	}

	public class WMLKeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLKey");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuesWMLKeyValueParserRuleCall_2_0 = (RuleCall)cValuesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cEOLTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Keyword cPlusSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final RuleCall cEOLTerminalRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		private final Assignment cValuesAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cValuesWMLKeyValueParserRuleCall_3_3_0 = (RuleCall)cValuesAssignment_3_3.eContents().get(0);
		private final Assignment cEolAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cEolAlternatives_4_0 = (Alternatives)cEolAssignment_4.eContents().get(0);
		private final RuleCall cEolEOLTerminalRuleCall_4_0_0 = (RuleCall)cEolAlternatives_4_0.eContents().get(0);
		private final RuleCall cEolSL_COMMENTTerminalRuleCall_4_0_1 = (RuleCall)cEolAlternatives_4_0.eContents().get(1);
		
		//WMLKey hidden(WS):
		//	name=ID "=" values+=WMLKeyValue* (EOL? "+" EOL? values+=WMLKeyValue+)* eol+=(EOL | SL_COMMENT);
		public ParserRule getRule() { return rule; }

		//name=ID "=" values+=WMLKeyValue* (EOL? "+" EOL? values+=WMLKeyValue+)* eol+=(EOL | SL_COMMENT)
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//values+=WMLKeyValue*
		public Assignment getValuesAssignment_2() { return cValuesAssignment_2; }

		//WMLKeyValue
		public RuleCall getValuesWMLKeyValueParserRuleCall_2_0() { return cValuesWMLKeyValueParserRuleCall_2_0; }

		//(EOL? "+" EOL? values+=WMLKeyValue+)*
		public Group getGroup_3() { return cGroup_3; }

		//EOL?
		public RuleCall getEOLTerminalRuleCall_3_0() { return cEOLTerminalRuleCall_3_0; }

		//"+"
		public Keyword getPlusSignKeyword_3_1() { return cPlusSignKeyword_3_1; }

		//EOL?
		public RuleCall getEOLTerminalRuleCall_3_2() { return cEOLTerminalRuleCall_3_2; }

		//values+=WMLKeyValue+
		public Assignment getValuesAssignment_3_3() { return cValuesAssignment_3_3; }

		//WMLKeyValue
		public RuleCall getValuesWMLKeyValueParserRuleCall_3_3_0() { return cValuesWMLKeyValueParserRuleCall_3_3_0; }

		//eol+=(EOL | SL_COMMENT)
		public Assignment getEolAssignment_4() { return cEolAssignment_4; }

		//EOL | SL_COMMENT
		public Alternatives getEolAlternatives_4_0() { return cEolAlternatives_4_0; }

		//EOL
		public RuleCall getEolEOLTerminalRuleCall_4_0_0() { return cEolEOLTerminalRuleCall_4_0_0; }

		//SL_COMMENT
		public RuleCall getEolSL_COMMENTTerminalRuleCall_4_0_1() { return cEolSL_COMMENTTerminalRuleCall_4_0_1; }
	}

	public class WMLKeyValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLKeyValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWMLValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWMLMacroCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWMLLuaCodeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWMLArrayCallParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//WMLKeyValue:
		//	WMLValue | WMLMacroCall | WMLLuaCode | WMLArrayCall;
		public ParserRule getRule() { return rule; }

		//WMLValue | WMLMacroCall | WMLLuaCode | WMLArrayCall
		public Alternatives getAlternatives() { return cAlternatives; }

		//WMLValue
		public RuleCall getWMLValueParserRuleCall_0() { return cWMLValueParserRuleCall_0; }

		//WMLMacroCall
		public RuleCall getWMLMacroCallParserRuleCall_1() { return cWMLMacroCallParserRuleCall_1; }

		//WMLLuaCode
		public RuleCall getWMLLuaCodeParserRuleCall_2() { return cWMLLuaCodeParserRuleCall_2; }

		//WMLArrayCall
		public RuleCall getWMLArrayCallParserRuleCall_3() { return cWMLArrayCallParserRuleCall_3; }
	}

	public class WMLMacroCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLMacroCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPointAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cPointFullStopSolidusKeyword_1_0 = (Keyword)cPointAssignment_1.eContents().get(0);
		private final Assignment cRelativeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cRelativeTildeKeyword_2_0 = (Keyword)cRelativeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cParametersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParametersWMLMacroCallParameterParserRuleCall_4_0 = (RuleCall)cParametersAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//WMLMacroCall:
		//	"{" point="./"? relative="~"? name=ID Parameters+=WMLMacroCallParameter* "}";
		public ParserRule getRule() { return rule; }

		//"{" point="./"? relative="~"? name=ID Parameters+=WMLMacroCallParameter* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//point="./"?
		public Assignment getPointAssignment_1() { return cPointAssignment_1; }

		//"./"
		public Keyword getPointFullStopSolidusKeyword_1_0() { return cPointFullStopSolidusKeyword_1_0; }

		//relative="~"?
		public Assignment getRelativeAssignment_2() { return cRelativeAssignment_2; }

		//"~"
		public Keyword getRelativeTildeKeyword_2_0() { return cRelativeTildeKeyword_2_0; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//Parameters+=WMLMacroCallParameter*
		public Assignment getParametersAssignment_4() { return cParametersAssignment_4; }

		//WMLMacroCallParameter
		public RuleCall getParametersWMLMacroCallParameterParserRuleCall_4_0() { return cParametersWMLMacroCallParameterParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class WMLMacroCallParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLMacroCallParameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWMLMacroParameterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWMLMacroCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//WMLMacroCallParameter:
		//	WMLMacroParameter | WMLMacroCall;
		public ParserRule getRule() { return rule; }

		//WMLMacroParameter | WMLMacroCall
		public Alternatives getAlternatives() { return cAlternatives; }

		//WMLMacroParameter
		public RuleCall getWMLMacroParameterParserRuleCall_0() { return cWMLMacroParameterParserRuleCall_0; }

		//WMLMacroCall
		public RuleCall getWMLMacroCallParserRuleCall_1() { return cWMLMacroCallParserRuleCall_1; }
	}

	public class WMLArrayCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLArrayCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueWMLValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//WMLArrayCall:
		//	"[" value+=WMLValue+ "]";
		public ParserRule getRule() { return rule; }

		//"[" value+=WMLValue+ "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//value+=WMLValue+
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//WMLValue
		public RuleCall getValueWMLValueParserRuleCall_1_0() { return cValueWMLValueParserRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class WMLMacroDefineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLMacroDefine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameDEFINETerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cExpressionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionsWMLValuedExpressionParserRuleCall_1_0 = (RuleCall)cExpressionsAssignment_1.eContents().get(0);
		private final Assignment cEndNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEndNameENDDEFTerminalRuleCall_2_0 = (RuleCall)cEndNameAssignment_2.eContents().get(0);
		
		//WMLMacroDefine:
		//	name=DEFINE Expressions+=WMLValuedExpression* endName=ENDDEF;
		public ParserRule getRule() { return rule; }

		//name=DEFINE Expressions+=WMLValuedExpression* endName=ENDDEF
		public Group getGroup() { return cGroup; }

		//name=DEFINE
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//DEFINE
		public RuleCall getNameDEFINETerminalRuleCall_0_0() { return cNameDEFINETerminalRuleCall_0_0; }

		//Expressions+=WMLValuedExpression*
		public Assignment getExpressionsAssignment_1() { return cExpressionsAssignment_1; }

		//WMLValuedExpression
		public RuleCall getExpressionsWMLValuedExpressionParserRuleCall_1_0() { return cExpressionsWMLValuedExpressionParserRuleCall_1_0; }

		//endName=ENDDEF
		public Assignment getEndNameAssignment_2() { return cEndNameAssignment_2; }

		//ENDDEF
		public RuleCall getEndNameENDDEFTerminalRuleCall_2_0() { return cEndNameENDDEFTerminalRuleCall_2_0; }
	}

	public class WMLPreprocIFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLPreprocIF");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cNameAlternatives_0_0 = (Alternatives)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameIFDEFTerminalRuleCall_0_0_0 = (RuleCall)cNameAlternatives_0_0.eContents().get(0);
		private final RuleCall cNameIFNDEFTerminalRuleCall_0_0_1 = (RuleCall)cNameAlternatives_0_0.eContents().get(1);
		private final RuleCall cNameIFHAVETerminalRuleCall_0_0_2 = (RuleCall)cNameAlternatives_0_0.eContents().get(2);
		private final RuleCall cNameIFNHAVETerminalRuleCall_0_0_3 = (RuleCall)cNameAlternatives_0_0.eContents().get(3);
		private final Assignment cExpressionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionsWMLValuedExpressionParserRuleCall_1_0 = (RuleCall)cExpressionsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElsesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElsesELSETerminalRuleCall_2_0_0 = (RuleCall)cElsesAssignment_2_0.eContents().get(0);
		private final Assignment cElseExpressionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cElseExpressionsWMLValuedExpressionParserRuleCall_2_1_0 = (RuleCall)cElseExpressionsAssignment_2_1.eContents().get(0);
		private final Assignment cEndNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEndNameENDIFTerminalRuleCall_3_0 = (RuleCall)cEndNameAssignment_3.eContents().get(0);
		
		//WMLPreprocIF:
		//	name=(IFDEF | IFNDEF | IFHAVE | IFNHAVE) Expressions+=WMLValuedExpression* (Elses=ELSE
		//	ElseExpressions+=WMLValuedExpression+)? endName=ENDIF;
		public ParserRule getRule() { return rule; }

		//name=(IFDEF | IFNDEF | IFHAVE | IFNHAVE) Expressions+=WMLValuedExpression* (Elses=ELSE
		//ElseExpressions+=WMLValuedExpression+)? endName=ENDIF
		public Group getGroup() { return cGroup; }

		//name=(IFDEF | IFNDEF | IFHAVE | IFNHAVE)
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//IFDEF | IFNDEF | IFHAVE | IFNHAVE
		public Alternatives getNameAlternatives_0_0() { return cNameAlternatives_0_0; }

		//IFDEF
		public RuleCall getNameIFDEFTerminalRuleCall_0_0_0() { return cNameIFDEFTerminalRuleCall_0_0_0; }

		//IFNDEF
		public RuleCall getNameIFNDEFTerminalRuleCall_0_0_1() { return cNameIFNDEFTerminalRuleCall_0_0_1; }

		//IFHAVE
		public RuleCall getNameIFHAVETerminalRuleCall_0_0_2() { return cNameIFHAVETerminalRuleCall_0_0_2; }

		//IFNHAVE
		public RuleCall getNameIFNHAVETerminalRuleCall_0_0_3() { return cNameIFNHAVETerminalRuleCall_0_0_3; }

		//Expressions+=WMLValuedExpression*
		public Assignment getExpressionsAssignment_1() { return cExpressionsAssignment_1; }

		//WMLValuedExpression
		public RuleCall getExpressionsWMLValuedExpressionParserRuleCall_1_0() { return cExpressionsWMLValuedExpressionParserRuleCall_1_0; }

		//(Elses=ELSE ElseExpressions+=WMLValuedExpression+)?
		public Group getGroup_2() { return cGroup_2; }

		//Elses=ELSE
		public Assignment getElsesAssignment_2_0() { return cElsesAssignment_2_0; }

		//ELSE
		public RuleCall getElsesELSETerminalRuleCall_2_0_0() { return cElsesELSETerminalRuleCall_2_0_0; }

		//ElseExpressions+=WMLValuedExpression+
		public Assignment getElseExpressionsAssignment_2_1() { return cElseExpressionsAssignment_2_1; }

		//WMLValuedExpression
		public RuleCall getElseExpressionsWMLValuedExpressionParserRuleCall_2_1_0() { return cElseExpressionsWMLValuedExpressionParserRuleCall_2_1_0; }

		//endName=ENDIF
		public Assignment getEndNameAssignment_3() { return cEndNameAssignment_3; }

		//ENDIF
		public RuleCall getEndNameENDIFTerminalRuleCall_3_0() { return cEndNameENDIFTerminalRuleCall_3_0; }
	}

	public class WMLRootExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLRootExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWMLTagParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWMLMacroCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWMLMacroDefineParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWMLTextdomainParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cWMLPreprocIFParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//WMLRootExpression:
		//	WMLTag | WMLMacroCall | WMLMacroDefine | WMLTextdomain | WMLPreprocIF;
		public ParserRule getRule() { return rule; }

		//WMLTag | WMLMacroCall | WMLMacroDefine | WMLTextdomain | WMLPreprocIF
		public Alternatives getAlternatives() { return cAlternatives; }

		//WMLTag
		public RuleCall getWMLTagParserRuleCall_0() { return cWMLTagParserRuleCall_0; }

		//WMLMacroCall
		public RuleCall getWMLMacroCallParserRuleCall_1() { return cWMLMacroCallParserRuleCall_1; }

		//WMLMacroDefine
		public RuleCall getWMLMacroDefineParserRuleCall_2() { return cWMLMacroDefineParserRuleCall_2; }

		//WMLTextdomain
		public RuleCall getWMLTextdomainParserRuleCall_3() { return cWMLTextdomainParserRuleCall_3; }

		//WMLPreprocIF
		public RuleCall getWMLPreprocIFParserRuleCall_4() { return cWMLPreprocIFParserRuleCall_4; }
	}

	public class WMLExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWMLRootExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWMLKeyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//WMLExpression:
		//	WMLRootExpression | WMLKey;
		public ParserRule getRule() { return rule; }

		//WMLRootExpression | WMLKey
		public Alternatives getAlternatives() { return cAlternatives; }

		//WMLRootExpression
		public RuleCall getWMLRootExpressionParserRuleCall_0() { return cWMLRootExpressionParserRuleCall_0; }

		//WMLKey
		public RuleCall getWMLKeyParserRuleCall_1() { return cWMLKeyParserRuleCall_1; }
	}

	public class WMLValuedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLValuedExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWMLExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWMLValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//WMLValuedExpression:
		//	WMLExpression | WMLValue;
		public ParserRule getRule() { return rule; }

		//WMLExpression | WMLValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//WMLExpression
		public RuleCall getWMLExpressionParserRuleCall_0() { return cWMLExpressionParserRuleCall_0; }

		//WMLValue
		public RuleCall getWMLValueParserRuleCall_1() { return cWMLValueParserRuleCall_1; }
	}

	public class WMLTextdomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLTextdomain");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameTEXTDOMAINTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//WMLTextdomain:
		//	name=TEXTDOMAIN;
		public ParserRule getRule() { return rule; }

		//name=TEXTDOMAIN
		public Assignment getNameAssignment() { return cNameAssignment; }

		//TEXTDOMAIN
		public RuleCall getNameTEXTDOMAINTerminalRuleCall_0() { return cNameTEXTDOMAINTerminalRuleCall_0; }
	}

	public class WMLLuaCodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLLuaCode");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueLUA_CODETerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//WMLLuaCode:
		//	value=LUA_CODE;
		public ParserRule getRule() { return rule; }

		//value=LUA_CODE
		public Assignment getValueAssignment() { return cValueAssignment; }

		//LUA_CODE
		public RuleCall getValueLUA_CODETerminalRuleCall_0() { return cValueLUA_CODETerminalRuleCall_0; }
	}

	public class WMLMacroParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLMacroParameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWMLValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMacroTokensParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//WMLMacroParameter:
		//	WMLValue | MacroTokens;
		public ParserRule getRule() { return rule; }

		//WMLValue | MacroTokens
		public Alternatives getAlternatives() { return cAlternatives; }

		//WMLValue
		public RuleCall getWMLValueParserRuleCall_0() { return cWMLValueParserRuleCall_0; }

		//MacroTokens
		public RuleCall getMacroTokensParserRuleCall_1() { return cMacroTokensParserRuleCall_1; }
	}

	public class WMLValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WMLValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final RuleCall cValueIDTerminalRuleCall_0_0 = (RuleCall)cValueAlternatives_0.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_1 = (RuleCall)cValueAlternatives_0.eContents().get(1);
		private final Keyword cValue_Keyword_0_2 = (Keyword)cValueAlternatives_0.eContents().get(2);
		private final Keyword cValueTildeKeyword_0_3 = (Keyword)cValueAlternatives_0.eContents().get(3);
		private final Keyword cValueFullStopKeyword_0_4 = (Keyword)cValueAlternatives_0.eContents().get(4);
		private final Keyword cValueFullStopSolidusKeyword_0_5 = (Keyword)cValueAlternatives_0.eContents().get(5);
		private final Keyword cValueDollarSignKeyword_0_6 = (Keyword)cValueAlternatives_0.eContents().get(6);
		private final Keyword cValueSolidusKeyword_0_7 = (Keyword)cValueAlternatives_0.eContents().get(7);
		private final Keyword cValueLeftParenthesisKeyword_0_8 = (Keyword)cValueAlternatives_0.eContents().get(8);
		private final Keyword cValueRightParenthesisKeyword_0_9 = (Keyword)cValueAlternatives_0.eContents().get(9);
		private final RuleCall cValueANY_OTHERTerminalRuleCall_0_10 = (RuleCall)cValueAlternatives_0.eContents().get(10);
		
		//WMLValue:
		//	value=(ID | STRING | "_" | "~" | "." | "./" | "$" | "/" | "(" | ")" | ANY_OTHER);
		public ParserRule getRule() { return rule; }

		//value=(ID | STRING | "_" | "~" | "." | "./" | "$" | "/" | "(" | ")" | ANY_OTHER)
		public Assignment getValueAssignment() { return cValueAssignment; }

		//ID | STRING | "_" | "~" | "." | "./" | "$" | "/" | "(" | ")" | ANY_OTHER
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }

		//ID
		public RuleCall getValueIDTerminalRuleCall_0_0() { return cValueIDTerminalRuleCall_0_0; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_1() { return cValueSTRINGTerminalRuleCall_0_1; }

		//"_"
		public Keyword getValue_Keyword_0_2() { return cValue_Keyword_0_2; }

		//"~"
		public Keyword getValueTildeKeyword_0_3() { return cValueTildeKeyword_0_3; }

		//"."
		public Keyword getValueFullStopKeyword_0_4() { return cValueFullStopKeyword_0_4; }

		//"./"
		public Keyword getValueFullStopSolidusKeyword_0_5() { return cValueFullStopSolidusKeyword_0_5; }

		//"$"
		public Keyword getValueDollarSignKeyword_0_6() { return cValueDollarSignKeyword_0_6; }

		//"/"
		public Keyword getValueSolidusKeyword_0_7() { return cValueSolidusKeyword_0_7; }

		//"("
		public Keyword getValueLeftParenthesisKeyword_0_8() { return cValueLeftParenthesisKeyword_0_8; }

		//")"
		public Keyword getValueRightParenthesisKeyword_0_9() { return cValueRightParenthesisKeyword_0_9; }

		//ANY_OTHER
		public RuleCall getValueANY_OTHERTerminalRuleCall_0_10() { return cValueANY_OTHERTerminalRuleCall_0_10; }
	}

	public class MacroTokensElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MacroTokens");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final Keyword cValueEqualsSignKeyword_0_0 = (Keyword)cValueAlternatives_0.eContents().get(0);
		private final Keyword cValueLeftSquareBracketKeyword_0_1 = (Keyword)cValueAlternatives_0.eContents().get(1);
		private final Keyword cValueRightSquareBracketKeyword_0_2 = (Keyword)cValueAlternatives_0.eContents().get(2);
		private final Keyword cValuePlusSignKeyword_0_3 = (Keyword)cValueAlternatives_0.eContents().get(3);
		private final Keyword cValueLeftSquareBracketSolidusKeyword_0_4 = (Keyword)cValueAlternatives_0.eContents().get(4);
		
		//// we use this as a hack for any characters in the macro call
		//// so we won't trigger things like: key=value or [tag]
		//MacroTokens:
		//	value=("=" | "[" | "]" | "+" | "[/");
		public ParserRule getRule() { return rule; }

		//value=("=" | "[" | "]" | "+" | "[/")
		public Assignment getValueAssignment() { return cValueAssignment; }

		//"=" | "[" | "]" | "+" | "[/"
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }

		//"="
		public Keyword getValueEqualsSignKeyword_0_0() { return cValueEqualsSignKeyword_0_0; }

		//"["
		public Keyword getValueLeftSquareBracketKeyword_0_1() { return cValueLeftSquareBracketKeyword_0_1; }

		//"]"
		public Keyword getValueRightSquareBracketKeyword_0_2() { return cValueRightSquareBracketKeyword_0_2; }

		//"+"
		public Keyword getValuePlusSignKeyword_0_3() { return cValuePlusSignKeyword_0_3; }

		//"[/"
		public Keyword getValueLeftSquareBracketSolidusKeyword_0_4() { return cValueLeftSquareBracketSolidusKeyword_0_4; }
	}
	
	
	private WMLRootElements pWMLRoot;
	private WMLGrammarElementElements pWMLGrammarElement;
	private WMLTagElements pWMLTag;
	private WMLKeyElements pWMLKey;
	private WMLKeyValueElements pWMLKeyValue;
	private WMLMacroCallElements pWMLMacroCall;
	private WMLMacroCallParameterElements pWMLMacroCallParameter;
	private WMLArrayCallElements pWMLArrayCall;
	private WMLMacroDefineElements pWMLMacroDefine;
	private WMLPreprocIFElements pWMLPreprocIF;
	private WMLRootExpressionElements pWMLRootExpression;
	private WMLExpressionElements pWMLExpression;
	private WMLValuedExpressionElements pWMLValuedExpression;
	private WMLTextdomainElements pWMLTextdomain;
	private WMLLuaCodeElements pWMLLuaCode;
	private WMLMacroParameterElements pWMLMacroParameter;
	private WMLValueElements pWMLValue;
	private MacroTokensElements pMacroTokens;
	private TerminalRule tLUA_CODE;
	private TerminalRule tIFHAVE;
	private TerminalRule tIFNHAVE;
	private TerminalRule tIFDEF;
	private TerminalRule tIFNDEF;
	private TerminalRule tELSE;
	private TerminalRule tENDIF;
	private TerminalRule tDEFINE;
	private TerminalRule tENDDEF;
	private TerminalRule tTEXTDOMAIN;
	private TerminalRule tSTRING;
	private TerminalRule tID;
	private TerminalRule tEOL;
	private TerminalRule tWS;
	private TerminalRule tANY_OTHER;
	private TerminalRule tSL_COMMENT;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public WMLGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	//WMLRoot:
	//	Expressions+=WMLRootExpression*;
	public WMLRootElements getWMLRootAccess() {
		return (pWMLRoot != null) ? pWMLRoot : (pWMLRoot = new WMLRootElements());
	}
	
	public ParserRule getWMLRootRule() {
		return getWMLRootAccess().getRule();
	}

	//// Dummy grammar element to act as the super of all WML grammar elements
	//WMLGrammarElement:
	//	WMLRoot | WMLValuedExpression | WMLKeyValue | WMLMacroCallParameter;
	public WMLGrammarElementElements getWMLGrammarElementAccess() {
		return (pWMLGrammarElement != null) ? pWMLGrammarElement : (pWMLGrammarElement = new WMLGrammarElementElements());
	}
	
	public ParserRule getWMLGrammarElementRule() {
		return getWMLGrammarElementAccess().getRule();
	}

	//WMLTag:
	//	"[" plus="+"? name=ID "]" Expressions+=WMLExpression* "[/" endName=ID "]";
	public WMLTagElements getWMLTagAccess() {
		return (pWMLTag != null) ? pWMLTag : (pWMLTag = new WMLTagElements());
	}
	
	public ParserRule getWMLTagRule() {
		return getWMLTagAccess().getRule();
	}

	//WMLKey hidden(WS):
	//	name=ID "=" values+=WMLKeyValue* (EOL? "+" EOL? values+=WMLKeyValue+)* eol+=(EOL | SL_COMMENT);
	public WMLKeyElements getWMLKeyAccess() {
		return (pWMLKey != null) ? pWMLKey : (pWMLKey = new WMLKeyElements());
	}
	
	public ParserRule getWMLKeyRule() {
		return getWMLKeyAccess().getRule();
	}

	//WMLKeyValue:
	//	WMLValue | WMLMacroCall | WMLLuaCode | WMLArrayCall;
	public WMLKeyValueElements getWMLKeyValueAccess() {
		return (pWMLKeyValue != null) ? pWMLKeyValue : (pWMLKeyValue = new WMLKeyValueElements());
	}
	
	public ParserRule getWMLKeyValueRule() {
		return getWMLKeyValueAccess().getRule();
	}

	//WMLMacroCall:
	//	"{" point="./"? relative="~"? name=ID Parameters+=WMLMacroCallParameter* "}";
	public WMLMacroCallElements getWMLMacroCallAccess() {
		return (pWMLMacroCall != null) ? pWMLMacroCall : (pWMLMacroCall = new WMLMacroCallElements());
	}
	
	public ParserRule getWMLMacroCallRule() {
		return getWMLMacroCallAccess().getRule();
	}

	//WMLMacroCallParameter:
	//	WMLMacroParameter | WMLMacroCall;
	public WMLMacroCallParameterElements getWMLMacroCallParameterAccess() {
		return (pWMLMacroCallParameter != null) ? pWMLMacroCallParameter : (pWMLMacroCallParameter = new WMLMacroCallParameterElements());
	}
	
	public ParserRule getWMLMacroCallParameterRule() {
		return getWMLMacroCallParameterAccess().getRule();
	}

	//WMLArrayCall:
	//	"[" value+=WMLValue+ "]";
	public WMLArrayCallElements getWMLArrayCallAccess() {
		return (pWMLArrayCall != null) ? pWMLArrayCall : (pWMLArrayCall = new WMLArrayCallElements());
	}
	
	public ParserRule getWMLArrayCallRule() {
		return getWMLArrayCallAccess().getRule();
	}

	//WMLMacroDefine:
	//	name=DEFINE Expressions+=WMLValuedExpression* endName=ENDDEF;
	public WMLMacroDefineElements getWMLMacroDefineAccess() {
		return (pWMLMacroDefine != null) ? pWMLMacroDefine : (pWMLMacroDefine = new WMLMacroDefineElements());
	}
	
	public ParserRule getWMLMacroDefineRule() {
		return getWMLMacroDefineAccess().getRule();
	}

	//WMLPreprocIF:
	//	name=(IFDEF | IFNDEF | IFHAVE | IFNHAVE) Expressions+=WMLValuedExpression* (Elses=ELSE
	//	ElseExpressions+=WMLValuedExpression+)? endName=ENDIF;
	public WMLPreprocIFElements getWMLPreprocIFAccess() {
		return (pWMLPreprocIF != null) ? pWMLPreprocIF : (pWMLPreprocIF = new WMLPreprocIFElements());
	}
	
	public ParserRule getWMLPreprocIFRule() {
		return getWMLPreprocIFAccess().getRule();
	}

	//WMLRootExpression:
	//	WMLTag | WMLMacroCall | WMLMacroDefine | WMLTextdomain | WMLPreprocIF;
	public WMLRootExpressionElements getWMLRootExpressionAccess() {
		return (pWMLRootExpression != null) ? pWMLRootExpression : (pWMLRootExpression = new WMLRootExpressionElements());
	}
	
	public ParserRule getWMLRootExpressionRule() {
		return getWMLRootExpressionAccess().getRule();
	}

	//WMLExpression:
	//	WMLRootExpression | WMLKey;
	public WMLExpressionElements getWMLExpressionAccess() {
		return (pWMLExpression != null) ? pWMLExpression : (pWMLExpression = new WMLExpressionElements());
	}
	
	public ParserRule getWMLExpressionRule() {
		return getWMLExpressionAccess().getRule();
	}

	//WMLValuedExpression:
	//	WMLExpression | WMLValue;
	public WMLValuedExpressionElements getWMLValuedExpressionAccess() {
		return (pWMLValuedExpression != null) ? pWMLValuedExpression : (pWMLValuedExpression = new WMLValuedExpressionElements());
	}
	
	public ParserRule getWMLValuedExpressionRule() {
		return getWMLValuedExpressionAccess().getRule();
	}

	//WMLTextdomain:
	//	name=TEXTDOMAIN;
	public WMLTextdomainElements getWMLTextdomainAccess() {
		return (pWMLTextdomain != null) ? pWMLTextdomain : (pWMLTextdomain = new WMLTextdomainElements());
	}
	
	public ParserRule getWMLTextdomainRule() {
		return getWMLTextdomainAccess().getRule();
	}

	//WMLLuaCode:
	//	value=LUA_CODE;
	public WMLLuaCodeElements getWMLLuaCodeAccess() {
		return (pWMLLuaCode != null) ? pWMLLuaCode : (pWMLLuaCode = new WMLLuaCodeElements());
	}
	
	public ParserRule getWMLLuaCodeRule() {
		return getWMLLuaCodeAccess().getRule();
	}

	//WMLMacroParameter:
	//	WMLValue | MacroTokens;
	public WMLMacroParameterElements getWMLMacroParameterAccess() {
		return (pWMLMacroParameter != null) ? pWMLMacroParameter : (pWMLMacroParameter = new WMLMacroParameterElements());
	}
	
	public ParserRule getWMLMacroParameterRule() {
		return getWMLMacroParameterAccess().getRule();
	}

	//WMLValue:
	//	value=(ID | STRING | "_" | "~" | "." | "./" | "$" | "/" | "(" | ")" | ANY_OTHER);
	public WMLValueElements getWMLValueAccess() {
		return (pWMLValue != null) ? pWMLValue : (pWMLValue = new WMLValueElements());
	}
	
	public ParserRule getWMLValueRule() {
		return getWMLValueAccess().getRule();
	}

	//// we use this as a hack for any characters in the macro call
	//// so we won't trigger things like: key=value or [tag]
	//MacroTokens:
	//	value=("=" | "[" | "]" | "+" | "[/");
	public MacroTokensElements getMacroTokensAccess() {
		return (pMacroTokens != null) ? pMacroTokens : (pMacroTokens = new MacroTokensElements());
	}
	
	public ParserRule getMacroTokensRule() {
		return getMacroTokensAccess().getRule();
	}

	//terminal LUA_CODE:
	//	"<<"->">>";
	public TerminalRule getLUA_CODERule() {
		return (tLUA_CODE != null) ? tLUA_CODE : (tLUA_CODE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LUA_CODE"));
	} 

	//// Preprocessor terminals
	//terminal IFHAVE:
	//	"#ifhave" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getIFHAVERule() {
		return (tIFHAVE != null) ? tIFHAVE : (tIFHAVE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IFHAVE"));
	} 

	//terminal IFNHAVE:
	//	"#ifnhave" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getIFNHAVERule() {
		return (tIFNHAVE != null) ? tIFNHAVE : (tIFNHAVE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IFNHAVE"));
	} 

	//terminal IFDEF:
	//	"#ifdef" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getIFDEFRule() {
		return (tIFDEF != null) ? tIFDEF : (tIFDEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IFDEF"));
	} 

	//terminal IFNDEF:
	//	"#ifndef" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getIFNDEFRule() {
		return (tIFNDEF != null) ? tIFNDEF : (tIFNDEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IFNDEF"));
	} 

	//terminal ELSE:
	//	"#else" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getELSERule() {
		return (tELSE != null) ? tELSE : (tELSE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ELSE"));
	} 

	//terminal ENDIF:
	//	"#endif" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getENDIFRule() {
		return (tENDIF != null) ? tENDIF : (tENDIF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ENDIF"));
	} 

	//terminal DEFINE:
	//	"#define" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getDEFINERule() {
		return (tDEFINE != null) ? tDEFINE : (tDEFINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DEFINE"));
	} 

	//terminal ENDDEF:
	//	"#enddef" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getENDDEFRule() {
		return (tENDDEF != null) ? tENDDEF : (tENDDEF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ENDDEF"));
	} 

	//terminal TEXTDOMAIN:
	//	"#textdomain" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getTEXTDOMAINRule() {
		return (tTEXTDOMAIN != null) ? tTEXTDOMAIN : (tTEXTDOMAIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TEXTDOMAIN"));
	} 

	//// end preprocessor terminals
	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal ID:
	//	("a".."z" | "A".."Z" | "0".."9" | "_" | "-" | ",")+;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal EOL:
	//	"\r"? "\n";
	public TerminalRule getEOLRule() {
		return (tEOL != null) ? tEOL : (tEOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EOL"));
	} 

	//terminal WS:
	//	(" " | "\t")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 

	//terminal SL_COMMENT:
	//	"#" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 
}
