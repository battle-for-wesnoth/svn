import ecore;
import xtext;

process( GeneratedMetamodel this ):
    process( ePackage );

process( EPackage this ):
    eClassifiers.add( ESerializable() ) ->
    eClassifiers.process();

process( EClassifier this ):
    null;

process( EClass this ):
    eStructuralFeatures.process() ->
    // enrich the grammar elements with schema-specific attributes
    if name == "WMLExpression" then {
        createAttribute( "_Cardinality", echar() , " " ) ->
        
        createCardinalityOperation( "is_Required", '1' ) ->
        createCardinalityOperation( "is_Forbidden", '-' ) ->
        createCardinalityOperation( "is_Optional", '?' ) ->
        createCardinalityOperation( "is_Repeatable", '*' ) ->
        
        createOperation( "isWMLTag", 
            "return ( this instanceof WMLTag );", eboolean() ) ->
        createOperation( "asWMLTag", 
            "if ( !( this instanceof WMLTag ) ) return null; return ( WMLTag ) this;", 
            wmlType( "WMLTag" ) ) ->
        createOperation( "isWMLKey", 
            "return ( this instanceof WMLKey );", eboolean() ) ->
        createOperation( "asWMLKey", 
            "if ( !( this instanceof WMLKey ) ) return null; return ( WMLKey ) this;", 
            wmlType( "WMLKey" ) )
            
    } else if name == "WMLTag" then {
    //eSuperTypes.add( ESerializable() )->
        createAttribute( "_InhertedTagName", estring() , "" ) ->
        createAttribute( "_NeedingExpansion", eboolean() , "false" ) ->
        createAttribute( "_Description", estring(), "" ) ->
        
        createGenericOperation( "getWMLTags", 
            "EList<WMLTag> result = new org.eclipse.emf.common.util.BasicEList<WMLTag>();
        for ( WMLExpression expression : getExpressions( ) ) {
            if ( expression.isWMLTag( ) )
                result.add( expression.asWMLTag( ) );
        }

        return result;", ecoreType( "EEList" ),
            wmlType( "WMLTag" ) ) ->
        createGenericOperation( "getWMLKeys", 
            "EList<WMLKey> result = new org.eclipse.emf.common.util.BasicEList<WMLKey>();
        for ( WMLExpression expression : getExpressions( ) ) {
            if ( expression.isWMLKey( ) )
                result.add( expression.asWMLKey( ) );
        }

        return result;", ecoreType( "EEList" ),
            wmlType( "WMLKey" ) )
    } else if name == "WMLKey" then {
        createAttribute( "_Enum", eboolean(), "false" ) ->
        createAttribute( "_Translatable", eboolean(), "false" ) ->
        createAttribute( "_DataType", estring(), "" ) 
    } else if name == "WMLGrammarElement" then {
	    // make all WML Grammar inherit from Serializable
	    eSuperTypes.add( ESerializable() )
    };

process( EStructuralFeature this ):
    null;

// make the all strings to default to the empty string
process( EAttribute this ):
    if  eAttributeType.name == "EString" then 
        setDefaultValueLiteral( "" );

createCardinalityOperation( EClass this, String name, char chr ) :
    let op = newOperation( name, eboolean() ) : 
        newAnnotation( op, "return _Cardinality == '" + chr + "';" );

createOperation( EClass this, String name, String body, EClassifier returnType ):
    let op = newOperation( name, returnType) : newAnnotation( op, body ); 

createGenericOperation( EClass this, String name, String body, EClassifier genericType,
        EClassifier typeArgument ):
    let op = newGenericOperation( name, createGenericType( genericType, typeArgument ) ) 
        : newAnnotation( op, body ); 

create EGenericType this createGenericType( EClassifier type, EClassifier argumentType ):
    let genType = new EGenericType : 
        setEClassifier( type ) ->
        eTypeArguments.add( let gen = new EGenericType : gen.setEClassifier( argumentType ) );

create EOperation this newOperation( EClass owner, String name, EClassifier returnType ) :
    setName( name ) -> setEType( returnType ) ->
    owner.eOperations.add( this );

create EOperation this newGenericOperation( EClass owner, String name, EGenericType type ):
    setName( name ) -> setEGenericType( type ) ->
    owner.eOperations.add( this );

create EAnnotation this newAnnotation( EOperation op, String value ):
    let an = new EStringToStringMapEntry :
        setSource( "http://www.eclipse.org/emf/2002/GenModel" ) ->
        an.setKey( "body" ) -> 
        an.setValue( value ) ->
        details.add( an ) ->
        op.eAnnotations.add( this );

create EAttribute this createAttribute( EClass owner, String name, EDataType type, String defValue ) :
    setName( name ) -> 
    setEType( type ) ->
    setDefaultValueLiteral( defValue ) ->
    // add attribute to class
    owner.eStructuralFeatures.add( this );

create EClass ESerializable() :
    setName( "ESerializable" ) ->
    setInterface( true ) ->
    setAbstract( true ) ->
    setInstanceClassName( "java.io.Serializable" ) ->
    this;

EDataType estring(): ecoreType( "EString" );
EDataType echar(): ecoreType( "EChar" );
EDataType eboolean(): ecoreType( "EBoolean" );

EClass wmlClass( String name ):
    wmlPackage().getEClassifier( name );

EClassifier wmlType( String name ):
    wmlPackage().getEClassifier( name );

EPackage wmlPackage():
    JAVA org.wesnoth.wml.impl.WmlPackageImpl.init();

EClassifier ecoreType( String name ) :
    ecorePackage().getEClassifier( name );

EPackage ecorePackage(): 
    JAVA org.eclipse.emf.ecore.impl.EcorePackageImpl.init();