import ecore;
import xtext;

process( GeneratedMetamodel this ):
    process( ePackage );

process( EPackage this ):
    eClassifiers.process();

process( EClassifier this ):
    null;

process( EClass this ):
    eStructuralFeatures.process() ->
     
    // enrich the grammar elements with schema-specific attributes
    if name == "WMLExpression" then {
        createAttribute( "_Cardinality", "EChar", " " ) ->
        createOperation( "isWMLTag", "return ( this instanceof WMLTag );", "EBoolean" ) ->
        createOperation( "asWMLTag", "if ( !( this instanceof WMLTag ) ) return null; return ( WMLTag ) this;", "WMLTag" ) ->
        createOperation( "isWMLKey", "return ( this instanceof WMLKey );", "EBoolean" ) ->
        createOperation( "asWMLKey", "if ( !( this instanceof WMLKey ) ) return null; return ( WMLKey ) this;", "WMLKey" )
    } else if name == "WMLTag" then {
        createAttribute( "_InhertedTagName", "EString", "" ) ->
        createAttribute( "_NeedingExpansion", "EBoolean", "false" ) ->
        createAttribute( "_Description", "EString", "" )
    } else if name == "WMLKey" then {
        createAttribute( "_Enum", "EBoolean", "false" ) ->
        createAttribute( "_Translatable", "EBoolean", "false" ) ->
        createAttribute( "_DataType", "EString", "" ) ->
        
        createCardinalityOperation( "is_Required", '1' ) ->
        createCardinalityOperation( "is_Forbidden", '-' ) ->
        createCardinalityOperation( "is_Optional", '?' ) ->
        createCardinalityOperation( "is_Repeatable", '*' )
    };

process( EStructuralFeature this ):
    null;

// make the all strings to default to the empty string
process( EAttribute this ):
    if  eAttributeType.name == "EString" then 
        setDefaultValueLiteral( "" );

createCardinalityOperation( EClass this, String name, char chr ) :
    let op = newOperation( name, "EBoolean" ) : 
        newAnnotation( op, "return _Cardinality == '" + chr + "';" );

createOperation( EClass this, String name, String body, String returnType):
    let op = newOperation( name, returnType) : newAnnotation( op, body ); 

create EOperation this newOperation( EClass owner, String name, String returnType ) :
    setName( name ) -> setEType( getDataType( returnType ) ) ->
    owner.eOperations.add( this );

create EAnnotation this newAnnotation( EOperation op, String value ):
    let an = new EStringToStringMapEntry :
        setSource( "http://www.eclipse.org/emf/2002/GenModel" ) ->
        an.setKey( "body" ) ->
        an.setValue( value ) ->
        details.add( an ) ->
        op.eAnnotations.add( this );

create EAttribute this createAttribute( EClass owner, String name, String type, String defValue ) :
    setName( name ) -> 
    setEType( getDataType( type ) ) ->
    setDefaultValueLiteral( defValue ) ->
    // add attribute to class
    owner.eStructuralFeatures.add( this );
     
EDataType getDataType( String name ): 
    if name.startsWith( "E" ) then
        ecorePackage().getEClassifier( name )
    else
        wmlPackage().getEClassifier( name );

EPackage wmlPackage():
    JAVA org.wesnoth.wml.impl.WmlPackageImpl.init();

EPackage ecorePackage(): 
    JAVA org.eclipse.emf.ecore.impl.EcorePackageImpl.init();